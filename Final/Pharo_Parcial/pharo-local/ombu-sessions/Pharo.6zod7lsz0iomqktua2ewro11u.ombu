OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.252125+01:00' ],		#prior : OmReference [ 'Pharo.13pw5lcp9fzipfko0patipem4', '10' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #Examples-SnakesAndLadders,		#affectedPackageName : #Examples-SnakesAndLadders	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.25555+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.259068+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakesAndLadders\r\tinstanceVariableNames: \'players squares turn die over\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLadders,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #players,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #squares,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #turn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #die,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLadders,						#isMetaSide : false					},					#name : #over,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLadders class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLadders class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLadders,					#isMetaSide : false				},				#parent : @7,				#content : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',				#stamp : 'on 3/14/2006 19:05'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'SnakesAndLadders example playToEnd\r\rA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.\r\rSee http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the game\r\rSnakesAndLadders has the following responsibilities:\r- enable scripting of an initial configuration of squares and players\r- keep track of the rules of the game\r- keep track whose turn it is to play\r- initiate a move\r- play a game to the end\r- report on moves and intermediate game states\r- stop when the game is over\r\rTypical usage (see the example):\r- Instantiate a new SnakesAndLadders\r- Add squares, snakes and ladders to build the game board \r- Join players\r- Play single moves or PlayToEnd',		#newStamp : 'on 3/14/2006 19:05'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.261587+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'add:',			#protocol : #initialize-release,			#sourceCode : 'add: aSquare \r\tsquares add: aSquare.\r\taSquare setPosition: squares size board: self',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.263607+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tsuper initialize.\r\tdie := Die new.\r\tsquares := OrderedCollection new.\r\tplayers := OrderedCollection new.\r\tturn := 1.\r\tover := false.',			#stamp : 'on 3/20/2006 10:16',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.266259+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t"Should also check that snakes and ladders lead to ordinary squares, and do not bounce\r\tpast the beginning or end of the board."\r\t^ squares size > 1\r\t\tand: [players size > 1\r\t\tand: [turn >= 1\r\t\tand: [turn <= players size]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.267641+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'join:',			#protocol : #initialize-release,			#sourceCode : 'join: aPlayer\r\tplayers add: aPlayer.\r\taPlayer moveTo: self firstSquare.\r',			#stamp : 'on 3/18/2006 12:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.269553+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #reset,			#protocol : #initialize-release,			#sourceCode : 'reset\r\tdie := Die new.\r\tturn := 1.\r\tover := false.\r\tplayers do: [:each | each moveTo: self firstSquare ].\r\tself assert: self invariant.',			#stamp : 'on 3/16/2006 11:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.270981+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'at:',			#protocol : #testing,			#sourceCode : 'at: position\r\t^ squares at: position',			#stamp : 'on 3/14/2006 16:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.272789+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #currentPlayer,			#protocol : #testing,			#sourceCode : 'currentPlayer\r\t^ players at: turn',			#stamp : 'on 3/14/2006 16:54',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.27398+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #firstSquare,			#protocol : #testing,			#sourceCode : 'firstSquare\r\t^ squares first',			#stamp : 'on 3/14/2006 16:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.275203+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isNotOver,			#protocol : #testing,			#sourceCode : 'isNotOver\r\t^ self isOver not',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.276421+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #isOver,			#protocol : #testing,			#sourceCode : 'isOver\r\t^ over',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.277582+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #lastPosition,			#protocol : #testing,			#sourceCode : 'lastPosition\r\t^ squares size',			#stamp : 'on 3/14/2006 16:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.279706+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #turn,			#protocol : #testing,			#sourceCode : 'turn\r\t^ turn',			#stamp : 'on 3/14/2006 16:22',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.28125+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #checkResult,			#protocol : #playing,			#sourceCode : 'checkResult\r\t^ self currentPlayer position = self lastPosition\r\t\tifTrue: [\r\t\t\tover := true.\r\t\t\t\' -- \', self currentPlayer asString, \' wins!\'\r\t\t\t]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.282947+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playOneMove,			#protocol : #playing,			#sourceCode : 'playOneMove\r\t| result |\r\tself assert: self invariant.\r\t^ self isOver \r\t\tifTrue: [\'The game is over!\']\r\t\tifFalse: \r\t\t\t[result := (self currentPlayer moveWith: die) , self checkResult.\r\t\t\tself upDateTurn.\r\t\t\tresult]',			#stamp : 'on 5/17/2006 16:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.28479+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #playToEnd,			#protocol : #playing,			#sourceCode : 'playToEnd\r\t"SnakesAndLadders example playToEnd"\r\tTranscript open.\r\tTranscript\r\t\tshow: self asString;\r\t\tcr;\r\t\tcr.\r\t[self isNotOver] whileTrue: \r\t\t\t[Transcript\r\t\t\t\tshow: self playOneMove asString;\r\t\t\t\tcr.\r\t\t\tTranscript\r\t\t\t\tshow: self asString;\r\t\t\t\tcr;\r\t\t\t\tcr]',			#stamp : 'jjddpp 9/9/2012 19:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.286288+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #upDateTurn,			#protocol : #playing,			#sourceCode : 'upDateTurn\r\tturn := 1 + (turn\\\\players size).',			#stamp : 'on 3/14/2006 16:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.288618+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #players,			#protocol : #accessors,			#sourceCode : 'players\r\t"needed for testing"\r\t^ players',			#stamp : 'on 3/15/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.29014+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'setDie:',			#protocol : #accessors,			#sourceCode : 'setDie: aDie\r\t"For testing only. Can play the game with a loaded die."\r\tdie := aDie.',			#stamp : 'on 3/15/2006 13:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.292048+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLadders,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsquares do: [:each | each printOn: aStream].',			#stamp : 'jjddpp 9/4/2012 11:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.295242+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example,			#protocol : #documentation,			#sourceCode : 'example\r\t"self example playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 6);\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.298066+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakesAndLadders class',				#isMetaSide : true			},			#name : #example2,			#protocol : #documentation,			#sourceCode : 'example2\r\t"self example2 playToEnd"\r\r\t^ (self new)\r\t\tadd: FirstSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 2);\r\t\tadd: BoardSquare new;\r\t\tadd: (LadderSquare forward: 3);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tadd: (SnakeSquare back: 4);\r\t\tadd: BoardSquare new;\r\t\tadd: BoardSquare new;\r\t\tjoin: (GamePlayer named: \'Jack\');\r\t\tjoin: (GamePlayer named: \'Jill\');\r\t\tyourself',			#stamp : 'on 10/28/2007 13:51',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.300613+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.301396+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Die\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #Die,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Die class\r\tinstanceVariableNames: \'\''				},				#name : #'Die class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Die,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Yields a random number from 1 to 6 ;-)',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.302669+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Die,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\t^ (1 to: 6) atRandom',			#stamp : 'on 3/14/2006 15:41',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.306057+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.306808+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #GamePlayer\r\tinstanceVariableNames: \'name square\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #GamePlayer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #name,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GamePlayer,						#isMetaSide : false					},					#name : #square,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GamePlayer class\r\tinstanceVariableNames: \'\''				},				#name : #'GamePlayer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GamePlayer,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',				#stamp : 'on 3/14/2006 19:07'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Keep track of the square you are on\r- Roll the die\r- Attempt to move the resulting number of squares',		#newStamp : 'on 3/14/2006 19:07'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.30913+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ square notNil\r\t\tand: [ name notNil ]',			#stamp : 'on 3/18/2006 12:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.310569+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'setName:',			#protocol : #initialize-release,			#sourceCode : 'setName: aName\r\tname := aName.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.311935+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #leaveCurrentSquare,			#protocol : #private,			#sourceCode : 'leaveCurrentSquare\r\tsquare notNil ifTrue: [ square remove: self ].',			#stamp : 'on 3/14/2006 15:53',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.313256+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveTo:',			#protocol : #playing,			#sourceCode : 'moveTo: aSquare\r\tself leaveCurrentSquare.\r\tsquare := aSquare landHere: self.\r',			#stamp : 'on 3/18/2006 15:21',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.314913+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'moveWith:',			#protocol : #playing,			#sourceCode : 'moveWith: aDie\r\t| roll destination |\r\tself assert: self invariant.\r\troll := aDie roll.\r\tdestination := square forwardBy: roll.\r\tself moveTo: destination.\r\t^ name, \' rolls \', roll asString, \' and lands at \', square asString',			#stamp : 'on 3/23/2006 09:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.317408+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #name,			#protocol : #testing,			#sourceCode : 'name\r\t^ name',			#stamp : 'on 3/15/2006 14:57',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.319027+01:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ square position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.320599+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GamePlayer,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: name',			#stamp : 'on 3/14/2006 15:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.323014+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GamePlayer class',				#isMetaSide : true			},			#name : #'named:',			#protocol : #'instance creation',			#sourceCode : 'named: aName\r\t^ self new setName: aName',			#stamp : 'on 3/18/2006 12:48',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.326497+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.327272+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #BoardSquare\r\tinstanceVariableNames: \'position player board\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #BoardSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #player,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #BoardSquare,						#isMetaSide : false					},					#name : #board,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BoardSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'BoardSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BoardSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',				#stamp : 'on 3/14/2006 19:27'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Remember position in the board\r- Keep track of any players on this square\r- Send on any players passing through\r- Displays itself with its position and any player who might be on it, e.g., [7 Jack]',		#newStamp : 'on 3/14/2006 19:27'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.329135+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'backwardBy:',			#protocol : #playing,			#sourceCode : 'backwardBy: squares \r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isFirstSquare \r\t\t\t\tifTrue: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifFalse: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.330741+01:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.33254+01:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'forwardBy:',			#protocol : #playing,			#sourceCode : 'forwardBy: squares\r\tself assert: self invariant.\r\t^ squares = 0 \r\t\tifTrue: [self destination]\r\t\tifFalse: \r\t\t\t[self isLastSquare \r\t\t\t\tifFalse: [self nextSquare forwardBy: squares - 1]\r\t\t\t\tifTrue: [self previousSquare backwardBy: squares - 1]]',			#stamp : 'on 3/18/2006 11:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.33521+01:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #playing,			#sourceCode : 'landHere: aPlayer\r\t^ self isOccupied\r\t\tifTrue: [ board firstSquare landHere: aPlayer ]\r\t\tifFalse: [ player := aPlayer. self ]',			#stamp : 'on 3/15/2006 15:43',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.336883+01:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #nextSquare,			#protocol : #playing,			#sourceCode : 'nextSquare\r\tself assert: self isLastSquare not.\r\t^ board at: position + 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.338529+01:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #previousSquare,			#protocol : #playing,			#sourceCode : 'previousSquare\r\tself assert: self isFirstSquare not.\r\t^ board at: position - 1',			#stamp : 'on 3/14/2006 16:32',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.340377+01:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: player = aPlayer.\r\tplayer := nil.',			#stamp : 'on 3/14/2006 16:14',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.343327+01:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ self isOccupied\r\t\tifTrue: [ \' \', player asString ]\r\t\tifFalse: [ \'\' ]',			#stamp : 'on 3/14/2006 17:18',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.34534+01:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'[\', position printString, self contents, \']\'.',			#stamp : 'on 3/14/2006 16:08',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.347351+01:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #invariant,			#protocol : #initialize-release,			#sourceCode : 'invariant\r\t^ board notNil\r\t\tand: [ position notNil\r\t\tand: [ position >= 0 \r\t\tand: [ position <= board lastPosition]]]',			#stamp : 'jjddpp 9/4/2012 12:23',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.35009+01:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #'setPosition:board:',			#protocol : #initialize-release,			#sourceCode : 'setPosition: aNumber board: aBoard \r\tposition := aNumber.\r\tboard := aBoard',			#stamp : 'on 3/18/2006 15:13',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.351941+01:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isFirstSquare,			#protocol : #testing,			#sourceCode : 'isFirstSquare\r\t^ position = 1',			#stamp : 'on 3/14/2006 16:12',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.35377+01:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isLastSquare,			#protocol : #testing,			#sourceCode : 'isLastSquare\r\t^ position = board lastPosition',			#stamp : 'on 3/20/2006 10:17',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.355616+01:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ player notNil',			#stamp : 'on 3/14/2006 16:40',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.358577+01:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BoardSquare,				#isMetaSide : false			},			#name : #position,			#protocol : #testing,			#sourceCode : 'position\r\t^ position',			#stamp : 'on 3/14/2006 17:03',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.361519+01:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.362271+01:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #LadderSquare\r\tinstanceVariableNames: \'forward\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LadderSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LadderSquare,						#isMetaSide : false					},					#name : #forward,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LadderSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'LadderSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LadderSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',				#stamp : 'on 3/17/2006 10:36'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her up the ladder (forward # squares)\r- Displays itself as a square with a positive offset, e.g., [6]3+>',		#newStamp : 'on 3/17/2006 10:36'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.364072+01:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self forwardBy: forward',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.367077+01:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\tsuper printOn: aStream.\r\taStream nextPutAll: forward asString, \'+>\'.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.368901+01:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LadderSquare,				#isMetaSide : false			},			#name : #'setForward:',			#protocol : #initialize-release,			#sourceCode : 'setForward: aNumber\r\tforward := aNumber.',			#stamp : 'on 3/18/2006 12:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.371543+01:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LadderSquare class',				#isMetaSide : true			},			#name : #'forward:',			#protocol : #'instance creation',			#sourceCode : 'forward: number\r\t^ self new setForward: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.373993+01:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.374728+01:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #FirstSquare\r\tinstanceVariableNames: \'players\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #FirstSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #FirstSquare,						#isMetaSide : false					},					#name : #players,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'FirstSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'FirstSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #FirstSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',				#stamp : 'on 3/14/2006 19:06'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- Allows multiple players to be added or removed [normal squares can only hold a single player]',		#newStamp : 'on 3/14/2006 19:06'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.377818+01:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #contents,			#protocol : #printing,			#sourceCode : 'contents\r\t^ players inject: \'\' into:\r\t\t\t[ :list :each | list , \' \', each asString ]',			#stamp : 'on 3/14/2006 15:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.379894+01:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize-release,			#sourceCode : 'initialize\r\tplayers := OrderedCollection new.',			#stamp : 'on 3/14/2006 15:30',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.381709+01:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'landHere:',			#protocol : #initialize-release,			#sourceCode : 'landHere: aPlayer\r\tplayers add: aPlayer.',			#stamp : 'on 3/15/2006 15:29',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.383552+01:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #isOccupied,			#protocol : #testing,			#sourceCode : 'isOccupied\r\t^ players size > 0',			#stamp : 'on 3/18/2006 11:10',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.386681+01:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FirstSquare,				#isMetaSide : false			},			#name : #'remove:',			#protocol : #playing,			#sourceCode : 'remove: aPlayer\r\tself assert: (players includes: aPlayer).\r\tplayers remove: aPlayer.',			#stamp : 'on 3/14/2006 16:15',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.389241+01:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.390001+01:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #MetaclassHierarchyTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #MetaclassHierarchyTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MetaclassHierarchyTest class\r\tinstanceVariableNames: \'\''				},				#name : #'MetaclassHierarchyTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MetaclassHierarchyTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Demonstrate the relationship between classes and metaclasses',				#stamp : 'on 3/19/2006 11:33'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Demonstrate the relationship between classes and metaclasses',		#newStamp : 'on 3/19/2006 11:33'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.39335+01:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MetaclassHierarchyTest,				#isMetaSide : false			},			#name : #testHierarchy,			#protocol : #running,			#sourceCode : 'testHierarchy\r\t"The class hierarchy"\r\tself assert: SnakeSquare superclass = BoardSquare.\r\tself assert: BoardSquare superclass = Object.\r\tself assert: Object superclass superclass = nil.\r\t"The parallel metaclass hierarchy"\r\tself assert: SnakeSquare class name = \'SnakeSquare class\'.\r\tself assert: SnakeSquare class superclass = BoardSquare class.\r\tself assert: BoardSquare class superclass = Object class.\r\tself assert: Object class superclass superclass = Class.\r\tself assert: Class superclass = ClassDescription.\r\tself assert: ClassDescription superclass = Behavior.\r\tself assert: Behavior superclass = Object.\r\t"The Metaclass hierarchy"\r\tself assert: SnakeSquare class class = Metaclass.\r\tself assert: BoardSquare class class = Metaclass.\r\tself assert: Object class class = Metaclass.\r\tself assert: Class class class = Metaclass.\r\tself assert: ClassDescription class class = Metaclass.\r\tself assert: Behavior class class = Metaclass.\r\tself assert: Metaclass superclass = ClassDescription.\r\t"The fixpoint"\r\tself assert: Metaclass class class = Metaclass',			#stamp : 'on 10/28/2007 15:49',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.396938+01:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.397649+01:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Die',				#traitCompositionSource : '{}',				#definitionSource : 'Die subclass: #LoadedDie\r\tinstanceVariableNames: \'roll\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #LoadedDie,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LoadedDie,						#isMetaSide : false					},					#name : #roll,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LoadedDie class\r\tinstanceVariableNames: \'\''				},				#name : #'LoadedDie class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LoadedDie,					#isMetaSide : false				},				#parent : @7,				#content : 'For testing purposes. When rolled, a loaded die returns a fixed value.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'For testing purposes. When rolled, a loaded die returns a fixed value.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.399586+01:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #roll,			#protocol : #playing,			#sourceCode : 'roll\r\tself assert: roll notNil.\r\t^ roll',			#stamp : 'on 3/18/2006 15:24',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.40171+01:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoadedDie,				#isMetaSide : false			},			#name : #'roll:',			#protocol : #playing,			#sourceCode : 'roll: aNumber\r\tself assert: ((1 to: 6) includes: aNumber).\r\troll := aNumber.',			#stamp : 'on 3/18/2006 15:25',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.404196+01:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.40591+01:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'BoardSquare',				#traitCompositionSource : '{}',				#definitionSource : 'BoardSquare subclass: #SnakeSquare\r\tinstanceVariableNames: \'back\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakeSquare,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeSquare,						#isMetaSide : false					},					#name : #back,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeSquare class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeSquare class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeSquare,					#isMetaSide : false				},				#parent : @7,				#content : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',				#stamp : 'on 3/20/2006 09:14'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Responsibilities:\r- If a player lands here, send him or her backwards (back # squares)\r- Displays itself as a square with a negative offset, e.g., <-3[5]',		#newStamp : 'on 3/20/2006 09:14'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.408027+01:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #destination,			#protocol : #playing,			#sourceCode : 'destination\r\t^ self backwardBy: back',			#stamp : 'on 3/15/2006 15:26',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.410375+01:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\taStream nextPutAll: \'<-\', back asString.\r\tsuper printOn: aStream.',			#stamp : 'on 3/16/2006 14:35',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.412376+01:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeSquare,				#isMetaSide : false			},			#name : #'setBack:',			#protocol : #initialize-release,			#sourceCode : 'setBack: aNumber\r\tback := aNumber.',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.416277+01:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'SnakeSquare class',				#isMetaSide : true			},			#name : #'back:',			#protocol : #'instance creation',			#sourceCode : 'back: number\r\t^ self new setBack: number',			#stamp : 'on 3/18/2006 12:50',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.418894+01:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.41961+01:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #SnakesAndLaddersTest\r\tinstanceVariableNames: \'eg loadedDie jack jill\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #eg,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #loadedDie,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jack,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakesAndLaddersTest,						#isMetaSide : false					},					#name : #jill,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Play a rigged game and check the results.',				#stamp : 'on 3/15/2006 13:24'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Play a rigged game and check the results.',		#newStamp : 'on 3/15/2006 13:24'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.421806+01:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.42507+01:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\teg := self example.\r\tloadedDie := LoadedDie new.\r\teg setDie: loadedDie.\r\tjack := eg players first.\r\tjill := eg players last.',			#stamp : 'on 3/16/2006 09:58',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.428184+01:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 6.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 4.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jill position = 9.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jack position = 10.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 12.\r\tself assert: eg isOver',			#stamp : 'on 3/23/2006 09:06',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.430976+01:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest,				#isMetaSide : false			},			#name : #testStartPosition,			#protocol : #running,			#sourceCode : 'testStartPosition\r\tself assert: eg lastPosition = 12.\r\tself assert: eg isNotOver.\r\tself assert: eg currentPlayer = jack.\r\tself assert: eg firstSquare isFirstSquare.\r\tself assert: eg firstSquare isLastSquare not.\r\tself assert: eg firstSquare position = 1.\r\tself assert: eg firstSquare isOccupied.\r\tself assert: (eg at: eg lastPosition) isFirstSquare not.\r\tself assert: (eg at: eg lastPosition) isLastSquare.\r\tself assert: (eg at: eg lastPosition) position = 12.\r\tself assert: (eg at: eg lastPosition) isOccupied not.\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1',			#stamp : 'on 3/18/2006 15:01',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.434439+01:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.435168+01:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SnakesAndLaddersTest',				#traitCompositionSource : '{}',				#definitionSource : 'SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Examples-SnakesAndLadders\''			},			#name : #SnakesAndLaddersTest2,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakesAndLaddersTest2 class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakesAndLaddersTest2 class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakesAndLaddersTest2,					#isMetaSide : false				},				#parent : @7,				#content : 'Some tests for a second example.',				#stamp : 'on 3/17/2006 10:50'			},			#classVariables : OrderedCollection [ ],			#category : #Examples-SnakesAndLadders,			#package : #Examples-SnakesAndLadders,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Some tests for a second example.',		#newStamp : 'on 3/17/2006 10:50'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.437328+01:00' ],		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #example,			#protocol : #running,			#sourceCode : 'example\r\t^ SnakesAndLadders example2',			#stamp : 'on 3/16/2006 09:59',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T09:34:21.441656+01:00' ],		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakesAndLaddersTest2,				#isMetaSide : false			},			#name : #testExample,			#protocol : #running,			#sourceCode : 'testExample\r\tself assert: jack name = \'Jack\'.\r\tself assert: jill name = \'Jill\'.\r\tself assert: jack position = 1.\r\tself assert: jill position = 1.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jack position = 2.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 3.\r\teg playOneMove.\r\tself assert: jack position = 5.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 7.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 2.\r\teg playOneMove.\r\tself assert: jack position = 1.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 5.\r\teg playOneMove.\r\tself assert: jill position = 12.\r\tself assert: eg currentPlayer = jack.\r\tloadedDie roll: 6.\r\teg playOneMove.\r\tself assert: jack position = 7.\r\tself assert: eg currentPlayer = jill.\r\tloadedDie roll: 1.\r\teg playOneMove.\r\tself assert: jill position = 13.\r\tself assert: eg isOver',			#stamp : 'on 3/18/2006 15:04',			#package : #Examples-SnakesAndLadders		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.161671+01:00' ],		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ExercicisCAP,		#affectedPackageName : #ExercicisCAP	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.17375+01:00' ],		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IntegerArray,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:10',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.221519+01:00' ],		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #arraySize,			#protocol : #'*ExercicisCAP',			#sourceCode : 'arraySize\r\t^ self size',			#stamp : 'Anonymous 11/14/2022 16:58',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.223237+01:00' ],		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.240135+01:00' ],		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\tself do: aBloc.',			#stamp : 'Anonymous 11/14/2022 18:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.241939+01:00' ],		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i | newColl at: i put: (self at: collSize-i+1) ].\r\t^ newColl ',			#stamp : 'Anonymous 11/14/2022 17:52',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:02.243497+01:00' ],		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t(1 to: newSize) do: \r\t\t[ :i | newT at: i put: ((self at: 2*i-1) + (self at: 2*i)) ].\r\t^ newT',			#stamp : 'Anonymous 11/14/2022 17:25',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.353894+01:00' ],		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IntegerArray,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:10',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.356986+01:00' ],		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #arraySize,			#protocol : #'*ExercicisCAP',			#sourceCode : 'arraySize\r\t^ self size',			#stamp : 'Anonymous 11/14/2022 16:58',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.360664+01:00' ],		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.362966+01:00' ],		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t(1 to: newSize) do: \r\t\t[ :i | newT at: i put: ((self at: 2*i-1) + (self at: 2*i)) ].\r\t^ newT',			#stamp : 'Anonymous 11/14/2022 17:25',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.3649+01:00' ],		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\tself do: aBloc.',			#stamp : 'Anonymous 11/14/2022 18:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.366573+01:00' ],		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i | newColl at: i put: (self at: collSize-i+1) ].\r\t^ newColl ',			#stamp : 'Anonymous 11/14/2022 17:52',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.36816+01:00' ],		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ArrayedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'ArrayedCollection variableSubclass: #Array\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Sequenceable\''			},			#name : #Array,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Array class\r\tinstanceVariableNames: \'\''				},				#name : #'Array class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Array,					#isMetaSide : false				},				#parent : @7,				#content : 'Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Smalltalk array is at position 1 and not 0. The main protocol to access array elements is the method at: and at:put:. \r\r- at: anInteger returns the element at index anInteger. \r- at: anInteger put: anObject puts anObject at index anInteger. \r\rArrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. \r\rThe following code creates an array of size 5, puts values in the first 3 locations and returns the first element.\r\r[[[ \r| anArray |\ranArray := Array new: 5. \ranArray at: 1 put: 4. \ranArray at: 2 put: 3/2. \ranArray at: 3 put: \'ssss\'. \ranArray at: 1\t\t\t\r> 4\r]]]\r\r#() creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. \r\rThe following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string \'here\'.\r\r[[[  \r#(1 \'here\') size \r> 2\r]]]\r\r{ } is a way to create arrays in a more dynamic manner.\r\r[[[ \r| array |\rarray := (Array new: 2). array\r\tat: 1 put: (Point x: 10 y: 20);\r\tat: 2 put: (Point x: 10 y: 20). \r\tarray\t\t\t\r]]]\r\ris equivalent to \r\r[[[\r{(10@20) . (10@20)}\r{Point x: 10 y: 20 . Point x: 10 y: 20}\r]]]\r',				#stamp : 'StephaneDucasse 10/30/2015 09:03'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Sequenceable,			#package : #Collections-Sequenceable,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.368973+01:00' ],		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : 'TSortable',				#definitionSource : 'Collection subclass: #SequenceableCollection\r\tuses: TSortable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Abstract\''			},			#name : #SequenceableCollection,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TSortable classTrait',					#definitionSource : 'SequenceableCollection class\r\tuses: TSortable classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'SequenceableCollection class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SequenceableCollection,					#isMetaSide : false				},				#parent : @7,				#content : 'I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Abstract,			#package : #Collections-Abstract,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.371975+01:00' ],		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SequenceableCollection',				#traitCompositionSource : '{}',				#definitionSource : 'SequenceableCollection subclass: #OrderedCollection\r\tinstanceVariableNames: \'array firstIndex lastIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Sequenceable\''			},			#name : #OrderedCollection,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #array,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #firstIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #lastIndex,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TSortable classTrait',					#definitionSource : 'OrderedCollection class\r\tuses: TSortable classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'OrderedCollection class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OrderedCollection,					#isMetaSide : false				},				#parent : @7,				#content : 'I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  \r\rDescription \r-------------------\rI am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.\r\rI am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).\r\rPublic API and Key Messages\r-------------------\t\r\r- #new / #withAll: aCollection / #with: anObject \tare common constructors\r\r- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject \tallow to add new elements to myself.\r\r- #remove: anObject / #removeIndex: anIndex \tallow to remove an element.\r\t\r- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.\r\rExamples\r-------------------\t\r\t\r\t"There is many ways to create an OrderedCollection, here are some:"\r\tordCol := OrderedCollection new.\r\tordCol\r\t\tadd: \'one\';\r\t\tadd: \'two\';\r\t\taddFirst: \'zero\';\r\t\taddLast: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'zero\' \'one\' \'two\' \'three\')"\r\r\t"or"\r\tordCol := OrderedCollection with: \'one\' with: \'two\' with: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\' \'three\')"\r\r\t"or from an other collection"\r\tordCol := OrderedCollection withAll: #(\'one\' \'two\' \'three\').\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\' \'three\')"\r\r\t"or"\r\t#(\'one\' \'two\' \'three\') asOrderedCollection.\r\r\t"Some manipulations"\r\tordCol := OrderedCollection ofSize: 2.\r\tordCol\r\t\tat: 1 put: \'one\';\r\t\tat: 2 put: \'two\';\r\t\tat: 2 ifAbsentPut: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\')"\r\tordCol\r\t\tremove: \'two\';\r\t\tremoveIndex: 1.\r\tordCol.\t\t"returns:  an OrderedCollection()"\r\r\t"A last one"\r\tordCol := OrderedCollection with: $b with: $c with: $a.\r\tordCol sort: [ :first :second | first < second ].\t\t"returns: an OrderedCollection($a $b $c)"\r\tordCol collect: [ :element | element asUppercase ].\t\t"returns:  an OrderedCollection($A $B $C)"\r\tordCol select: [ :element | element >= $b ].\t\t"returns:  an OrderedCollection($b $c)"\r\tordCol do: [ :element | element inspect ].\r\tordCol asArray\t\t"returns: #($a $b $c)"\r\t\t\t \rInternal Representation and Key Implementation Points.\r-------------------\t\r\r    Instance Variables\r\tarray:\t\t\t<Array> \t\tAn Array where I store my elements. If I need a bigger one I can remove this one and create a new one.\r\tfirstIndex:\t\t<Integer> \tThe index of my first element.\r\tlastIndex:\t\t<Integer> \tThe index of my last element.\r\rI store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double).',				#stamp : 'NicolaiHess 5/25/2016 21:36'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Sequenceable,			#package : #Collections-Sequenceable,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:11.372165+01:00' ],		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ArrayedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'ArrayedCollection variableWordSubclass: #IntegerArray\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Native\''			},			#name : #IntegerArray,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IntegerArray class\r\tinstanceVariableNames: \'\''				},				#name : #'IntegerArray class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IntegerArray,					#isMetaSide : false				},				#parent : @7,				#content : 'IntegerArrays store 32bit signed Integer values.\rNegative values are stored as 2\'s complement.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Native,			#package : #Collections-Native,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:15.623432+01:00' ],		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ExercicisCAP-Anonymous.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2022-11-15T10:07:15.675066+01:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IntegerArray,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:10',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2022-11-15T10:07:15.723229+01:00' ],		#trigger : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #arraySize,			#protocol : #'*ExercicisCAP',			#sourceCode : 'arraySize\r\t^ self size',			#stamp : 'Anonymous 11/14/2022 16:58',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2022-11-15T10:07:15.724408+01:00' ],		#trigger : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2022-11-15T10:07:15.725438+01:00' ],		#trigger : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\tself do: aBloc.',			#stamp : 'Anonymous 11/14/2022 18:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2022-11-15T10:07:15.72713+01:00' ],		#trigger : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i | newColl at: i put: (self at: collSize-i+1) ].\r\t^ newColl ',			#stamp : 'Anonymous 11/14/2022 17:52',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2022-11-15T10:07:15.727884+01:00' ],		#trigger : OmReference [ '109' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t(1 to: newSize) do: \r\t\t[ :i | newT at: i put: ((self at: 2*i-1) + (self at: 2*i)) ].\r\t^ newT',			#stamp : 'Anonymous 11/14/2022 17:25',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-15T10:07:46.459525+01:00' ],		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ProblemesCAP2022-jjddpp.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2022-11-15T10:07:46.500674+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @7,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',		#newStamp : 'jjddpp 9/30/2016 14:38'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2022-11-15T10:07:46.501289+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ProblemesCAP2022,		#affectedPackageName : #ProblemesCAP2022	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2022-11-15T10:07:46.547832+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CuaAmbPrioritat\r\tinstanceVariableNames: \'vector\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2022\''			},			#name : #CuaAmbPrioritat,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CuaAmbPrioritat,						#isMetaSide : false					},					#name : #vector,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CuaAmbPrioritat class\r\tinstanceVariableNames: \'\''				},				#name : #'CuaAmbPrioritat class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CuaAmbPrioritat,					#isMetaSide : false				},				#parent : @8,				#content : 'A CuaAmbPrioritat is xxx\r\rInstance Variables\r\tvector:\t\t<Object>\r\rvector\r\t- xxxxx\r',				#stamp : 'jjddpp 9/30/2016 14:38'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2022,			#package : #ProblemesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2022-11-15T10:07:46.550713+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please c',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2022-11-15T10:07:46.552028+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pila\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2022\''			},			#name : #Pila,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pila class\r\tinstanceVariableNames: \'\''				},				#name : #'Pila class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pila,					#isMetaSide : false				},				#parent : @8,				#content : 'Please c',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2022,			#package : #ProblemesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2022-11-15T10:07:46.555348+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please ',		#newStamp : 'jjddpp 10/3/2019 09:29'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2022-11-15T10:07:46.556638+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Sequencia\r\tinstanceVariableNames: \'seq\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProblemesCAP2022\''			},			#name : #Sequencia,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Sequencia,						#isMetaSide : false					},					#name : #seq,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Sequencia class\r\tinstanceVariableNames: \'\''				},				#name : #'Sequencia class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Sequencia,					#isMetaSide : false				},				#parent : @8,				#content : 'Please ',				#stamp : 'jjddpp 10/3/2019 09:29'			},			#classVariables : OrderedCollection [ ],			#category : #ProblemesCAP2022,			#package : #ProblemesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2022-11-15T10:07:46.584219+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #checkContents,			#protocol : #'*ProblemesCAP2022',			#sourceCode : 'checkContents\r\t| allowed |\r\tallowed := #($A $T $C $G).\r\tself do: [ :each | (allowed includes: each) ifFalse: [ ^ false] ].\r\t^ true',			#stamp : 'jjddpp 10/3/2019 09:37',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2022-11-15T10:07:46.585616+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Character,				#isMetaSide : false			},			#name : #'check:',			#protocol : #'*ProblemesCAP2022',			#sourceCode : 'check: aChar\r\t| at cg |\r\tat := (self = $A and: [ aChar = $T ]) or: [ self = $T and: [ aChar = $A ] ].\r\tcg := (self = $C and: [ aChar = $G ]) or: [ self = $G and: [ aChar = $C ] ].\r\t^ at or: [ cg ]\r\t',			#stamp : 'jjddpp 10/3/2019 09:41',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2022-11-15T10:07:46.586309+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegir:',			#protocol : #'public interface',			#sourceCode : 'afegir: anElement\r\r\tvector addLast: anElement.\r\tself surar: (self mida)',			#stamp : 'jjddpp 9/19/2018 17:43',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2022-11-15T10:07:46.588579+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'afegirTots:',			#protocol : #'public interface',			#sourceCode : 'afegirTots: aCollection\r\t"Suposarem que aCollection té elements del tipus adeqüat"\r\taCollection do: [ :each | self afegir: each ]\r\t',			#stamp : 'jjddpp 9/19/2019 11:21',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2022-11-15T10:07:46.589259+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #buida,			#protocol : #'public interface',			#sourceCode : 'buida\r\t^ self mida = 0',			#stamp : 'jjddpp 9/19/2018 17:44',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2022-11-15T10:07:46.589852+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'enfonsar:',			#protocol : #private,			#sourceCode : 'enfonsar: aNumber\r\t| n c |\r\tn := self mida.\r\tc := aNumber * 2.\r\t(c <= n) ifTrue: [ \r\t\t\t\t((c + 1 <= n) and: [ (vector at: (c+1)) < (vector at: c) ]) ifTrue: [ c := c + 1 ].\r\t\t\t\t(vector at: aNumber) > (vector at: c)  ifTrue: [ \r\t\t\t\t\t\t\tvector swap: aNumber with: c.\r\t\t\t\t\t\t\tself enfonsar: c  ] ]\r',			#stamp : 'jjddpp 9/19/2018 19:34',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2022-11-15T10:07:46.590401+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\t\r\tvector := OrderedCollection new.',			#stamp : 'jjddpp 9/19/2019 11:13',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2022-11-15T10:07:46.590945+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #mida,			#protocol : #'public interface',			#sourceCode : 'mida\r\t^ vector size',			#stamp : 'jjddpp 9/30/2016 15:05',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2022-11-15T10:07:46.591462+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #minim,			#protocol : #'public interface',			#sourceCode : 'minim\r\t^ vector at: 1.',			#stamp : 'jjddpp 9/30/2016 14:45',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2022-11-15T10:07:46.592009+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #'surar:',			#protocol : #private,			#sourceCode : 'surar: aNumber\r\t(aNumber ~= 1 and: [(vector at: (aNumber // 2)) > (vector at: aNumber) ])\r\t\tifTrue: [  vector swap: aNumber with: (aNumber // 2).\r\t\t\t\t\tself surar: (aNumber // 2)\t]',			#stamp : 'jjddpp 9/19/2018 19:35',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2022-11-15T10:07:46.592543+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CuaAmbPrioritat,				#isMetaSide : false			},			#name : #treureMin,			#protocol : #'public interface',			#sourceCode : 'treureMin\r\t| x s |\r\ts := self mida.\r\tx := vector at: 1.\r\tvector at: 1 put: (vector at: s).\r\tvector removeLast.\r\tself enfonsar: 1.\r\t^ x ',			#stamp : 'jjddpp 9/19/2018 17:45',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2022-11-15T10:07:46.593181+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pila class',				#isMetaSide : true			},			#name : #creaPila,			#protocol : #'as yet unclassified',			#sourceCode : 'creaPila\r\t| pila index |\r\tpila := OrderedCollection new.\r\tindex := 0.\r\t^ { \r\t[ pila := OrderedCollection new. index := 0. ] .\r\t[ index > 0 ifTrue: [ index := index - 1. pila removeLast ] \r\t\t\t\t\tifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ index > 0 ifTrue: [ pila last ]  ifFalse: [ Object error: \'Pila Buida\' ] ] .\r\t[ :elem | index := index + 1. pila add: elem. ] .\r\t[ index ] .\r\t[ index = 0 ] .\r\t }',			#stamp : 'jjddpp 11/11/2022 14:56',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2022-11-15T10:07:46.593796+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Sequencia class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\taString asUppercase checkContents ifFalse: [ self error: \'Seqüència mal formada\'  ].\r\t^ self new with: aString asUppercase',			#stamp : 'jjddpp 10/3/2019 09:55',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2022-11-15T10:07:46.594541+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'benFormada:',			#protocol : #'as yet unclassified',			#sourceCode : 'benFormada: aSeq\r\t| mida tmpseq1 tmpseq2 |\r\tmida := (self seq size) min: (aSeq seq size).\r\ttmpseq1 := self seq truncateTo: mida.\r\ttmpseq2 := aSeq seq truncateTo: mida.\r\ttmpseq1 with: tmpseq2 do: [ :c1 :c2 | (c1 check: c2) ifFalse: [ ^false ] ].\r\t^ true ',			#stamp : 'jjddpp 10/3/2019 09:53',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2022-11-15T10:07:46.595049+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #seq,			#protocol : #accessing,			#sourceCode : 'seq\r\t^ seq',			#stamp : 'jjddpp 10/3/2019 09:46',			#package : #ProblemesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2022-11-15T10:07:46.595589+01:00' ],		#trigger : OmReference [ '116' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Sequencia,				#isMetaSide : false			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aString\r\tseq := aString\r\t',			#stamp : 'jjddpp 10/3/2019 10:20',			#package : #ProblemesCAP2022		}	}}