OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.235584+01:00' ],		#prior : OmReference [ 'Pharo.13pw5lcp9fzipfko0patipem4', '10' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ProvesCAP2022,		#affectedPackageName : #ProvesCAP2022	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.286713+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.288169+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.290475+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := 5 euro.\r\teur10 := 10 euro.\r\teur20 := 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:07',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.293288+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = 10 euro.\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 15:08',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.296252+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: 5 euro + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:10',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.315819+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #euro,			#protocol : #'*ProvesCAP2022',			#sourceCode : 'euro\r\t^ Pasta moneda: \'EUR\' quantitat: self',			#stamp : 'PolPerezCastillo 11/12/2022 15:06',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.321653+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.322601+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.323896+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pasta class',				#isMetaSide : true			},			#name : #'moneda:quantitat:',			#protocol : #'instance creation',			#sourceCode : 'moneda: aString quantitat: aNumber\r\t^ self new moneda: aString; quantitat: aNumber ',			#stamp : 'PolPerezCastillo 11/12/2022 14:59',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.325801+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ (self quantitat + aPasta quantitat) euro]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 15:09',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.32715+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'=',			#protocol : #equality,			#sourceCode : '= aPasta\r\t^ self moneda = aPasta moneda and: [ self quantitat = aPasta quantitat ].',			#stamp : 'PolPerezCastillo 11/12/2022 14:36',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.329435+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #moneda,			#protocol : #accessing,			#sourceCode : 'moneda\r\t^ moneda',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.330474+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'moneda:',			#protocol : #accessing,			#sourceCode : 'moneda: anObject\r\tmoneda := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.331443+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #quantitat,			#protocol : #accessing,			#sourceCode : 'quantitat\r\t^ quantitat',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:56:57.332348+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'quantitat:',			#protocol : #accessing,			#sourceCode : 'quantitat: anObject\r\tquantitat := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:57:15.60204+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #ProvesCAP2022'			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoletePasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoletePasta,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:57:15.626011+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpClassRemoval {		#classRemoved : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: #ProvesCAP2022'			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AnObsoletePastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AnObsoletePastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AnObsoletePastaTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:57:15.628116+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #euro,			#protocol : #'*ProvesCAP2022',			#sourceCode : 'euro\r\t^ Pasta moneda: \'EUR\' quantitat: self',			#stamp : 'PolPerezCastillo 11/12/2022 15:06',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:57:15.629216+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Number',				#traitCompositionSource : '{}',				#definitionSource : 'Number subclass: #Integer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Kernel-Numbers\''			},			#name : #Integer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Integer class\r\tinstanceVariableNames: \'\''				},				#name : #'Integer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Integer,					#isMetaSide : false				},				#parent : @7,				#content : 'I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.\r\t\rInteger division consists of:\r\t/\texact division, answers a fraction if result is not a whole integer\r\t//\tanswers an Integer, rounded towards negative infinity\r\t\\\\\tis modulo rounded towards negative infinity\r\tquo: truncated division, rounded towards zero',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Kernel-Numbers,			#package : #Kernel,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ProvesCAP2022'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:57:21.383656+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ProvesCAP2022-PolPerezCastillo.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2022-11-12T17:57:21.426118+01:00' ],		#trigger : @3	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2022-11-12T17:57:21.447325+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @8,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2022-11-12T17:57:21.450435+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Unclassified\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @8,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Unclassified,			#package : 'nil',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2022-11-12T17:57:21.451725+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @8,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2022-11-12T17:57:21.471652+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := 5 euro.\r\teur10 := 10 euro.\r\teur20 := 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:07',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2022-11-12T17:57:21.473303+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = 10 euro.\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 15:08',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2022-11-12T17:57:21.474356+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: 5 euro + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:10',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2022-11-12T17:57:21.475554+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pasta class',				#isMetaSide : true			},			#name : #'moneda:quantitat:',			#protocol : #'instance creation',			#sourceCode : 'moneda: aString quantitat: aNumber\r\t^ self new moneda: aString; quantitat: aNumber ',			#stamp : 'PolPerezCastillo 11/12/2022 14:59',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2022-11-12T17:57:21.476246+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ (self quantitat + aPasta quantitat) euro]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 15:09',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2022-11-12T17:57:21.476845+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'=',			#protocol : #equality,			#sourceCode : '= aPasta\r\t^ self moneda = aPasta moneda and: [ self quantitat = aPasta quantitat ].',			#stamp : 'PolPerezCastillo 11/12/2022 14:36',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2022-11-12T17:57:21.477407+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #moneda,			#protocol : #accessing,			#sourceCode : 'moneda\r\t^ moneda',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2022-11-12T17:57:21.477964+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'moneda:',			#protocol : #accessing,			#sourceCode : 'moneda: anObject\r\tmoneda := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2022-11-12T17:57:21.478518+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #quantitat,			#protocol : #accessing,			#sourceCode : 'quantitat\r\t^ quantitat',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2022-11-12T17:57:21.479054+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'quantitat:',			#protocol : #accessing,			#sourceCode : 'quantitat: anObject\r\tquantitat := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2022-11-12T17:57:21.479834+01:00' ],		#trigger : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #euro,			#protocol : #'*ProvesCAP2022',			#sourceCode : 'euro\r\t^ Pasta moneda: \'EUR\' quantitat: self',			#stamp : 'PolPerezCastillo 11/12/2022 15:06',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:58:32.350714+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ProvaClosures\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #ProvaClosures,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProvaClosures class\r\tinstanceVariableNames: \'\''				},				#name : #'ProvaClosures class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProvaClosures,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T17:58:35.067138+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ProvaClosures\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #ProvaClosures,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ProvaClosures class\r\tinstanceVariableNames: \'\''				},				#name : #'ProvaClosures class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ProvaClosures,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T18:01:32.306053+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProvaClosures,				#isMetaSide : false			},			#name : #provaClosures,			#protocol : #'as yet unclassified',			#sourceCode : 'provaClosures\r\t| comptador resetComptador incComptador valorComptador|\r\tcomptador:= 0.\r\tresetComptador := [ comptador:= 0. comptador ].\r\tincComptador := [ :i | comptador := comptador + i. comptador ].\r\tvalorComptador := [ comptador ].\r\t^ { resetComptador . incComptador . valorComptador }.',			#stamp : 'Anonymous 11/12/2022 18:01',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T18:05:42.301799+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProvaClosures,				#isMetaSide : false			},			#name : #provaClosures,			#protocol : #'as yet unclassified',			#sourceCode : 'provaClosures\r\t| comptador resetComptador incComptador valorComptador|\r\tcomptador:= 0.\r\tresetComptador := [ comptador:= 0. comptador ].\r\tincComptador := [ :i | comptador := comptador + i. comptador ].\r\tvalorComptador := [ comptador ].\r\t^ { resetComptador . incComptador . valorComptador }.',			#stamp : 'Anonymous 11/12/2022 18:01',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ProvaClosures,				#isMetaSide : false			},			#name : #provaClosures,			#protocol : #prova,			#sourceCode : 'provaClosures\r\t| comptador resetComptador incComptador valorComptador|\r\tcomptador:= 0.\r\tresetComptador := [ comptador:= 0. comptador ].\r\tincComptador := [ :i | comptador := comptador + i. comptador ].\r\tvalorComptador := [ comptador ].\r\t^ { resetComptador . incComptador . valorComptador }.',			#stamp : 'Anonymous 11/12/2022 18:01',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T18:13:46.919045+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'ProvesCAP2022-Anonymous.2',		#repositoryDescription : '/home/polete146/Escritorio/UNI/SW/CAP/Final/Pharo_Parcial/pharo-local/package-cache'	}}