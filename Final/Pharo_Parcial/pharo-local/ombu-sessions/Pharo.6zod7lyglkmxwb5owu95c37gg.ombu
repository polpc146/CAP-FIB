OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T16:57:40.382264+01:00' ],		#prior : OmReference [ 'Pharo.13pw5lcp9fzipfko0patipem4', '10' ],		#self : OmReference [ '1' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ArrayedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'ArrayedCollection variableSubclass: #Array\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Sequenceable\''			},			#name : #Array,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Array class\r\tinstanceVariableNames: \'\''				},				#name : #'Array class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Array,					#isMetaSide : false				},				#parent : @7,				#content : 'Array is a fixed-sized collection of elements accessed by integer indices. Contrary to the C convention, the first element of a Smalltalk array is at position 1 and not 0. The main protocol to access array elements is the method at: and at:put:. \r\r- at: anInteger returns the element at index anInteger. \r- at: anInteger put: anObject puts anObject at index anInteger. \r\rArrays are fixed-size collections therefore we cannot add or remove elements at the end of an array. \r\rThe following code creates an array of size 5, puts values in the first 3 locations and returns the first element.\r\r[[[ \r| anArray |\ranArray := Array new: 5. \ranArray at: 1 put: 4. \ranArray at: 2 put: 3/2. \ranArray at: 3 put: \'ssss\'. \ranArray at: 1\t\t\t\r> 4\r]]]\r\r#() creates literal arrays with static (or “literal”) elements that have to be known when the expression is compiled, and not when it is executed. \r\rThe following code creates an array of size 2 where the first element is the (literal) number 1 and the second the (literal) string \'here\'.\r\r[[[  \r#(1 \'here\') size \r> 2\r]]]\r\r{ } is a way to create arrays in a more dynamic manner.\r\r[[[ \r| array |\rarray := (Array new: 2). array\r\tat: 1 put: (Point x: 10 y: 20);\r\tat: 2 put: (Point x: 10 y: 20). \r\tarray\t\t\t\r]]]\r\ris equivalent to \r\r[[[\r{(10@20) . (10@20)}\r{Point x: 10 y: 20 . Point x: 10 y: 20}\r]]]\r',				#stamp : 'StephaneDucasse 10/30/2015 09:03'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Sequenceable,			#package : #Collections-Sequenceable,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T16:58:17.460206+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #arraySize,			#protocol : #'*ExercicisCAP',			#sourceCode : 'arraySize\r\t^ self size',			#stamp : 'Anonymous 11/14/2022 16:58',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:04:51.447286+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self size = 0\r\t\tifTrue: [  ]',			#stamp : 'Anonymous 11/14/2022 17:04',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:06:37.378986+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self size = 0\r\t\tifTrue: [  ]',			#stamp : 'Anonymous 11/14/2022 17:04',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self size = 0\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:06',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:06:58.154276+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self size = 0\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:06',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:06',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:09:32.159276+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:06',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:09:59.865633+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'ArrayedCollection',				#traitCompositionSource : '{}',				#definitionSource : 'ArrayedCollection variableWordSubclass: #IntegerArray\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Native\''			},			#name : #IntegerArray,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IntegerArray class\r\tinstanceVariableNames: \'\''				},				#name : #'IntegerArray class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IntegerArray,					#isMetaSide : false				},				#parent : @7,				#content : 'IntegerArrays store 32bit signed Integer values.\rNegative values are stored as 2\'s complement.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Native,			#package : #Collections-Native,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:10:05.662239+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IntegerArray,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:10',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:14:41.365488+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Collection',				#traitCompositionSource : 'TSortable',				#definitionSource : 'Collection subclass: #SequenceableCollection\r\tuses: TSortable\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Abstract\''			},			#name : #SequenceableCollection,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TSortable classTrait',					#definitionSource : 'SequenceableCollection class\r\tuses: TSortable classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'SequenceableCollection class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SequenceableCollection,					#isMetaSide : false				},				#parent : @7,				#content : 'I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices.',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Abstract,			#package : #Collections-Abstract,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:20:16.174928+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size / 2.',			#stamp : 'Anonymous 11/14/2022 17:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:22:16.302477+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size / 2.',			#stamp : 'Anonymous 11/14/2022 17:20',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t',			#stamp : 'Anonymous 11/14/2022 17:22',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:25:41.796675+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t',			#stamp : 'Anonymous 11/14/2022 17:22',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t(1 to: newSize) do: \r\t\t[ :i | newT at: i put: ((self at: 2*i-1) + (self at: 2*i)) ].\r\t^ newT',			#stamp : 'Anonymous 11/14/2022 17:25',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:50:52.466168+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i ]',			#stamp : 'Anonymous 11/14/2022 17:50',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T17:52:41.206178+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i ]',			#stamp : 'Anonymous 11/14/2022 17:50',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i | newColl at: i put: (self at: collSize-i+1) ].\r\t^ newColl ',			#stamp : 'Anonymous 11/14/2022 17:52',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:00:45.31478+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\t(1 to: (self size)) do:\r\t\t[ :i | self at: i put: ((self at: i) aBloc) ]',			#stamp : 'Anonymous 11/14/2022 18:00',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:04:06.157213+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\t(1 to: (self size)) do:\r\t\t[ :i | self at: i put: ((self at: i) aBloc) ]',			#stamp : 'Anonymous 11/14/2022 18:00',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\t(1 to: (self size)) do:\r\t\t[ :i | self at: i put: ((self at: i)do:aBloc) ].',			#stamp : 'Anonymous 11/14/2022 18:04',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:20:06.626508+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\t(1 to: (self size)) do:\r\t\t[ :i | self at: i put: ((self at: i)do:aBloc) ].',			#stamp : 'Anonymous 11/14/2022 18:04',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\tself do: aBloc.',			#stamp : 'Anonymous 11/14/2022 18:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:27:37.218804+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement  ] ',			#stamp : 'Anonymous 11/14/2022 18:27',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:28:30.554984+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement  ] ',			#stamp : 'Anonymous 11/14/2022 18:27',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self ] ',			#stamp : 'Anonymous 11/14/2022 18:28',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:29:45.125866+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self ] ',			#stamp : 'Anonymous 11/14/2022 18:28',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:29:59.59466+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self ] ',			#stamp : 'Anonymous 11/14/2022 18:29',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:33:38.017937+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self ] ',			#stamp : 'Anonymous 11/14/2022 18:29',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self at: (self size + 1) put: anElement ] ',			#stamp : 'Anonymous 11/14/2022 18:33',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:34:13.971455+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self at: (self size + 1) put: anElement ] ',			#stamp : 'Anonymous 11/14/2022 18:33',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement  ] ',			#stamp : 'Anonymous 11/14/2022 18:34',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:34:34.568215+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement  ] ',			#stamp : 'Anonymous 11/14/2022 18:34',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement ] ',			#stamp : 'Anonymous 11/14/2022 18:34',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:36:07.625208+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement ] ',			#stamp : 'Anonymous 11/14/2022 18:34',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:36:21.957871+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'SequenceableCollection',				#traitCompositionSource : '{}',				#definitionSource : 'SequenceableCollection subclass: #OrderedCollection\r\tinstanceVariableNames: \'array firstIndex lastIndex\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Collections-Sequenceable\''			},			#name : #OrderedCollection,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #array,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #firstIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #OrderedCollection,						#isMetaSide : false					},					#name : #lastIndex,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : 'TSortable classTrait',					#definitionSource : 'OrderedCollection class\r\tuses: TSortable classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'OrderedCollection class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #OrderedCollection,					#isMetaSide : false				},				#parent : @7,				#content : 'I am one of the most common collection. I can grow, and elements can be added sequentially by the user.  \r\rDescription \r-------------------\rI am more general than Array; my size grows on demand. I store data inside an Array and remember the first and last index. If I need, I can replace this Array by a larger one.\r\rI am usually used to store an unknown amount of objects. When my contents size will not move, one can send me the #asArray message to get better performances, but I cannot grow anymore (add: and remove: are not supported on Array).\r\rPublic API and Key Messages\r-------------------\t\r\r- #new / #withAll: aCollection / #with: anObject \tare common constructors\r\r- #add: anObject / #at: anIndex put: anObject / #at: anIndex ifAbsentPut: anObject \tallow to add new elements to myself.\r\r- #remove: anObject / #removeIndex: anIndex \tallow to remove an element.\r\t\r- #do: aBlock / #collect: aBlock / #select: aBlock / #reject: aBlock \tare common iterators.\r\rExamples\r-------------------\t\r\t\r\t"There is many ways to create an OrderedCollection, here are some:"\r\tordCol := OrderedCollection new.\r\tordCol\r\t\tadd: \'one\';\r\t\tadd: \'two\';\r\t\taddFirst: \'zero\';\r\t\taddLast: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'zero\' \'one\' \'two\' \'three\')"\r\r\t"or"\r\tordCol := OrderedCollection with: \'one\' with: \'two\' with: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\' \'three\')"\r\r\t"or from an other collection"\r\tordCol := OrderedCollection withAll: #(\'one\' \'two\' \'three\').\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\' \'three\')"\r\r\t"or"\r\t#(\'one\' \'two\' \'three\') asOrderedCollection.\r\r\t"Some manipulations"\r\tordCol := OrderedCollection ofSize: 2.\r\tordCol\r\t\tat: 1 put: \'one\';\r\t\tat: 2 put: \'two\';\r\t\tat: 2 ifAbsentPut: \'three\'.\r\tordCol.\t\t"returns: an OrderedCollection(\'one\' \'two\')"\r\tordCol\r\t\tremove: \'two\';\r\t\tremoveIndex: 1.\r\tordCol.\t\t"returns:  an OrderedCollection()"\r\r\t"A last one"\r\tordCol := OrderedCollection with: $b with: $c with: $a.\r\tordCol sort: [ :first :second | first < second ].\t\t"returns: an OrderedCollection($a $b $c)"\r\tordCol collect: [ :element | element asUppercase ].\t\t"returns:  an OrderedCollection($A $B $C)"\r\tordCol select: [ :element | element >= $b ].\t\t"returns:  an OrderedCollection($b $c)"\r\tordCol do: [ :element | element inspect ].\r\tordCol asArray\t\t"returns: #($a $b $c)"\r\t\t\t \rInternal Representation and Key Implementation Points.\r-------------------\t\r\r    Instance Variables\r\tarray:\t\t\t<Array> \t\tAn Array where I store my elements. If I need a bigger one I can remove this one and create a new one.\r\tfirstIndex:\t\t<Integer> \tThe index of my first element.\r\tlastIndex:\t\t<Integer> \tThe index of my last element.\r\rI store my elements inside an array. This array is AT LEAST of the size of my elements. If someone adds an element and my array is not large enough, I remove it and I create a new one larger with the same elements (usually, the size double).',				#stamp : 'NicolaiHess 5/25/2016 21:36'			},			#classVariables : OrderedCollection [ ],			#category : #Collections-Sequenceable,			#package : #Collections-Sequenceable,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ExercicisCAP'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:36:41.541108+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement ]',			#stamp : 'Anonymous 11/14/2022 18:36',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:37:04.517175+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self push: anElement ]',			#stamp : 'Anonymous 11/14/2022 18:36',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement  ]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:37:47.146626+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement  ]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T18:41:28.2381+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'ExercicisCAP-Anonymous.1',		#repositoryDescription : '/home/polete146/Escritorio/UNI/SW/CAP/Final/Pharo_Parcial/pharo-local/package-cache'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:12:50.959486+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #mig,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mig\r',			#stamp : 'Anonymous 11/14/2022 19:12',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:14:14.59252+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #mig,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mig\r',			#stamp : 'Anonymous 11/14/2022 19:12',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #mig,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mig\r\t^ self at: self size / 2',			#stamp : 'Anonymous 11/14/2022 19:14',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:15:34.04125+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #mig,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mig\r\t^ self at: self size / 2',			#stamp : 'Anonymous 11/14/2022 19:14',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #mig,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mig\r\t^ self at: (self size / 2) ceiling ',			#stamp : 'Anonymous 11/14/2022 19:15',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:17:00.309404+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'swap:with:',			#protocol : #accessing,			#sourceCode : 'swap: i with: j\r',			#stamp : 'Anonymous 11/14/2022 19:17',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'swap:with:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'swap: i with: j\r',			#stamp : 'Anonymous 11/14/2022 19:17',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:17:00.313732+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'swap:with:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'swap: oneIndex with: anotherIndex \r\t"Move the element at oneIndex to anotherIndex, and vice-versa."\r\r\t| element |\r\telement := self at: oneIndex.\r\tself at: oneIndex put: (self at: anotherIndex).\r\tself at: anotherIndex put: element',			#stamp : '',			#package : #ExercicisCAP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'swap:with:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'swap: i with: j\r',			#stamp : 'Anonymous 11/14/2022 19:17',			#package : #ExercicisCAP		}	}}