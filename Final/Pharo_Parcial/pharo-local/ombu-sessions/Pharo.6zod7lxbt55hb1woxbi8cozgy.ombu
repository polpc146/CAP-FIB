OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-14T19:51:34.224772+01:00' ],		#prior : OmReference [ 'Pharo.13pw5lcp9fzipfko0patipem4', '10' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ExercicisCAP-Anonymous.1'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2022-11-14T19:51:34.286723+01:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IntegerArray,				#isMetaSide : false			},			#name : #mitjana,			#protocol : #'*ExercicisCAP',			#sourceCode : 'mitjana\r\t| sum |\r\tsum := 0.\r\t^ self isEmpty\r\t\tifTrue: [ \'array buit\' ]\r\t\tifFalse: [ self do: [ :each | sum := sum + each ].\r\t\t\t\t\t  sum / self size ]',			#stamp : 'Anonymous 11/14/2022 17:10',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2022-11-14T19:51:34.316484+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Array,				#isMetaSide : false			},			#name : #arraySize,			#protocol : #'*ExercicisCAP',			#sourceCode : 'arraySize\r\t^ self size',			#stamp : 'Anonymous 11/14/2022 16:58',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2022-11-14T19:51:34.317603+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OrderedCollection,				#isMetaSide : false			},			#name : #'afegeix:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'afegeix: anElement\r\t^ (self includes: anElement)\r\t\tifTrue: [\'ja existeix a la col·lecció\']\r\t\tifFalse: [ self add: anElement.\r\t\t\t\t\t  self]',			#stamp : 'Anonymous 11/14/2022 18:37',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2022-11-14T19:51:34.322326+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #'aplica:',			#protocol : #'*ExercicisCAP',			#sourceCode : 'aplica: aBloc\r\tself do: aBloc.',			#stamp : 'Anonymous 11/14/2022 18:20',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2022-11-14T19:51:34.326682+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #inversa,			#protocol : #'*ExercicisCAP',			#sourceCode : 'inversa\r\t| newColl collSize |\r\tcollSize := self size.\r\tnewColl := self class ofSize: collSize.\r\t(1 to: collSize) do:\r\t\t[ :i | newColl at: i put: (self at: collSize-i+1) ].\r\t^ newColl ',			#stamp : 'Anonymous 11/14/2022 17:52',			#package : #ExercicisCAP		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2022-11-14T19:51:34.32997+01:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SequenceableCollection,				#isMetaSide : false			},			#name : #novaT,			#protocol : #'*ExercicisCAP',			#sourceCode : 'novaT\r\t| newT newSize |\r\tnewSize := self size // 2.\r\tnewT := self class ofSize: newSize .\r\t(1 to: newSize) do: \r\t\t[ :i | newT at: i put: ((self at: 2*i-1) + (self at: 2*i)) ].\r\t^ newT',			#stamp : 'Anonymous 11/14/2022 17:25',			#package : #ExercicisCAP		}	}}