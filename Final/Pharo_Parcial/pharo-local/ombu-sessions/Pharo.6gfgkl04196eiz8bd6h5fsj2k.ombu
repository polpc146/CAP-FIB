OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:19:11.047986+02:00' ],		#prior : OmReference [ 'Pharo.5ksgqfomqmnlrgpfl6u59v9qj', '75' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxy,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #error-handling,			#sourceCode : 'doesNotUnderstand: aMessage \r\tTranscript show: \'performing \', aMessage printString; cr.\r\tinvocationCount := invocationCount + 1.\r\t^ aMessage sendTo: subject\r',			#stamp : 'onierstrasz 6/10/2009 11:30',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxy,				#isMetaSide : false			},			#name : #'doesNotUnderstand:',			#protocol : #error-handling,			#sourceCode : 'doesNotUnderstand: aMessage \r\t(\'performing \', aMessage printString) traceCr.\r\tinvocationCount := invocationCount + 1.\r\t^ aMessage sendTo: subject\r',			#stamp : 'jjddpp 10/24/2019 10:19',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:32:43.070298+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 4',			#stamp : 'jjddpp 9/3/2019 08:47',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 5',			#stamp : 'jjddpp 10/24/2019 10:32',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:33:19.999549+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 5',			#stamp : 'jjddpp 10/24/2019 10:32',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself assert: point invocationCount = 1',			#stamp : 'jjddpp 10/24/2019 10:33',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:34:06.902252+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself assert: point invocationCount = 1',			#stamp : 'jjddpp 10/24/2019 10:33',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 5.\r\tself assert: point invocationCount = 4\r\t',			#stamp : 'jjddpp 10/24/2019 10:34',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:37:02.251465+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does two self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 5.\r\tself assert: point invocationCount = 4\r\t',			#stamp : 'jjddpp 10/24/2019 10:34',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LoggingProxyTest,				#isMetaSide : false			},			#name : #testSelf,			#protocol : #running,			#sourceCode : 'testSelf\r\t| point |\r\tpoint := 1 @ 2.\r\tLoggingProxy new become: point.\r\tself assert: point invocationCount = 0.\r\tself assert: (point rectangle: 3 @ 4) area = 4.\r\t"rectangle: does four self-sends"\r\t"oops -- self sends are not intercepted"\r\tself deny: point invocationCount = 5.\r\t',			#stamp : 'jjddpp 10/24/2019 10:37',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:40:48.044067+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\tx := 1000.\r\ty := 1001',			#stamp : 'jjddpp 10/24/2019 10:40',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:40:48.110078+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #initialize,			#protocol : #'as yet unclassified',			#sourceCode : 'initialize\r\tx := 1000.\r\ty := 1001',			#stamp : 'jjddpp 10/24/2019 10:40',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tx := 1000.\r\ty := 1001',			#stamp : 'jjddpp 10/24/2019 10:40',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:48:48.071583+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #testAccessors,			#protocol : #running,			#sourceCode : 'testAccessors\r\tself deny: (DynamicAccessors methodDict keys includes: #x).\r\tself assert: DynamicAccessors new x = nil.\r\tself assert: (DynamicAccessors methodDict keys includes: #x).',			#stamp : 'onierstrasz 6/8/2009 15:43',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #testAccessors,			#protocol : #running,			#sourceCode : 'testAccessors\r\tself deny: (DynamicAccessors methodDict keys includes: #x).\r\tself assert: DynamicAccessors new x = 1000.\r\tself assert: (DynamicAccessors methodDict keys includes: #x).',			#stamp : 'jjddpp 10/24/2019 10:48',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:00.65535+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:00.656629+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:14.985213+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\t"DynamicAccessors methodDict removeDangerouslyKey: #x ifAbsent: []"\r\tDynamicAccessors removeSelector: #x.',			#stamp : 'jjddpp 10/22/2014 18:55',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:19.339911+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #testAccessors,			#protocol : #running,			#sourceCode : 'testAccessors\r\tself deny: (DynamicAccessors methodDict keys includes: #x).\r\tself assert: DynamicAccessors new x = 1000.\r\tself assert: (DynamicAccessors methodDict keys includes: #x).',			#stamp : 'jjddpp 10/24/2019 10:48',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #testAccessors,			#protocol : #running,			#sourceCode : 'testAccessors\r\tself deny: (DynamicAccessors methodDict keys includes: #x).\r\tself assert: DynamicAccessors new x = 1000.\r\tself assert: (DynamicAccessors methodDict keys includes: #x).\r\t',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:27.441114+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:47.259087+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #'as yet unclassified',			#sourceCode : 'tearDown\r\t"DynamicAccessors methodDict removeDangerouslyKey: #x ifAbsent: []"\r\tDynamicAccessors removeSelector: #x.',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:50:47.322121+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #'as yet unclassified',			#sourceCode : 'tearDown\r\t"DynamicAccessors methodDict removeDangerouslyKey: #x ifAbsent: []"\r\tDynamicAccessors removeSelector: #x.',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessorsTest,				#isMetaSide : false			},			#name : #tearDown,			#protocol : #running,			#sourceCode : 'tearDown\r\t"DynamicAccessors methodDict removeDangerouslyKey: #x ifAbsent: []"\r\tDynamicAccessors removeSelector: #x.',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:51:03.634441+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:50',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:51:08.076388+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:51',			#package : #Reflection-Complete		}	}}OmEntry {	#tags : {		#author : 'jjddpp',		#time : DateAndTime [ '2019-10-24T10:51:08.077768+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DynamicAccessors,				#isMetaSide : false			},			#name : #x,			#protocol : #'as yet unclassified',			#sourceCode : 'x\r ^ x',			#stamp : 'jjddpp 10/24/2019 10:51',			#package : #Reflection-Complete		}	}}