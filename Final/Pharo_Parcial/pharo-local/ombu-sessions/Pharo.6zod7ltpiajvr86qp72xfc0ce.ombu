OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:42:41.011473+01:00' ],		#prior : OmReference [ 'Pharo.13pw5lcp9fzipfko0patipem4', '10' ],		#self : OmReference [ '1' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ProvesCAP2022,		#affectedPackageName : #ProvesCAP2022	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:42:41.059792+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:42:54.025551+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:43:27.844343+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #setup	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:47:20.086788+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:47:20.095898+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := Pasta new.\r\teur10 := Pasta new.\r\teur20 := Pasta new.',			#stamp : 'Anonymous 11/12/2022 13:47',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T13:47:26.516032+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',		#newStamp : '<historical>'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T14:22:14.651782+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #moneda class: Pasta classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #quantitat class: Pasta classVariable: false)'			}		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2022-11-12T14:22:26.038411+01:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #moneda,			#protocol : #accessing,			#sourceCode : 'moneda\r\t^ moneda',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2022-11-12T14:22:29.843186+01:00' ],		#trigger : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'moneda:',			#protocol : #accessing,			#sourceCode : 'moneda: anObject\r\tmoneda := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2022-11-12T14:22:31.308748+01:00' ],		#trigger : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #quantitat,			#protocol : #accessing,			#sourceCode : 'quantitat\r\t^ quantitat',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2022-11-12T14:22:32.937764+01:00' ],		#trigger : OmReference [ '8' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'quantitat:',			#protocol : #accessing,			#sourceCode : 'quantitat: anObject\r\tquantitat := anObject',			#stamp : 'Anonymous 11/12/2022 14:22',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T14:25:40.217642+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := Pasta new.\r\teur10 := Pasta new.\r\teur20 := Pasta new.',			#stamp : 'Anonymous 11/12/2022 13:47',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := Pasta new moneda: \'EUR\'; quantitat: 5.\r\teur10 := Pasta new moneda: \'EUR\'; quantitat: 10.\r\teur20 := Pasta new moneda: \'EUR\'; quantitat: 20.',			#stamp : 'Anonymous 11/12/2022 14:25',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T14:26:15.934772+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'TestCase',				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #PastaTest\r\tinstanceVariableNames: \'eur5 eur10 eur20\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #PastaTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur5,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur10,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #PastaTest,						#isMetaSide : false					},					#name : #eur20,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'PastaTest class\r\tinstanceVariableNames: \'\''				},				#name : #'PastaTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #PastaTest,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\teur10:\t\t<Object>\r\teur20:\t\t<Object>\r\teur5:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #tests	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T14:27:25.613293+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta new moneda: \'EUR\'; quantitat: 10).',			#stamp : 'Anonymous 11/12/2022 14:27',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2022-11-12T14:27:49.574213+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := Pasta new moneda: \'EUR\'; quantitat: 5.\r\teur10 := Pasta new moneda: \'EUR\'; quantitat: 10.\r\teur20 := Pasta new moneda: \'EUR\'; quantitat: 20.',			#stamp : 'Anonymous 11/12/2022 14:25',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := (Pasta new moneda: \'EUR\'; quantitat: 5).\r\teur10 := (Pasta new moneda: \'EUR\'; quantitat: 10).\r\teur20 := (Pasta new moneda: \'EUR\'; quantitat: 20).',			#stamp : 'Anonymous 11/12/2022 14:27',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:31:26.88911+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta new moneda: \'EUR\'; quantitat: 10).',			#stamp : 'Anonymous 11/12/2022 14:27',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta new moneda: \'EUR\'; quantitat: 10).\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 14:31',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:32:37.978106+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #comparison	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:34:26.438932+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparison,			#sourceCode : '= aPasta\r\t^ self moneda = aPasta moneda and: [ self quantitat = aPasta quantitat ].',			#stamp : 'PolPerezCastillo 11/12/2022 14:34',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:35:42.203806+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparison,			#sourceCode : '= aPasta\r\t^ self moneda = aPasta moneda and: [ self quantitat = aPasta quantitat ].',			#stamp : 'PolPerezCastillo 11/12/2022 14:34',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:35:42.219312+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #comparison	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:35:49.89641+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #equality	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:36:00.329511+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'=',			#protocol : #equality,			#sourceCode : '= aPasta\r\t^ self moneda = aPasta moneda and: [ self quantitat = aPasta quantitat ].',			#stamp : 'PolPerezCastillo 11/12/2022 14:36',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:38:57.168263+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := (Pasta new moneda: \'EUR\'; quantitat: 5).\r\teur10 := (Pasta new moneda: \'EUR\'; quantitat: 10).\r\teur20 := (Pasta new moneda: \'EUR\'; quantitat: 20).',			#stamp : 'PolPerezCastillo 11/12/2022 14:38',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:39:05.086127+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setup,			#protocol : #setup,			#sourceCode : 'setup\r\teur5 := (Pasta new moneda: \'EUR\'; quantitat: 5).\r\teur10 := (Pasta new moneda: \'EUR\'; quantitat: 10).\r\teur20 := (Pasta new moneda: \'EUR\'; quantitat: 20).',			#stamp : 'Anonymous 11/12/2022 14:27',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:51:28.475844+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''			},			#name : #Pasta,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #moneda,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#name : #quantitat,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''				},				#name : #'Pasta class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Pasta,					#isMetaSide : false				},				#parent : @7,				#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #ProvesCAP2022,			#package : #ProvesCAP2022,			#sharedPools : OrderedCollection [ ]		},		#protocol : #arithmetic	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:52:50.070517+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\t',			#stamp : 'PolPerezCastillo 11/12/2022 14:52',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:54:28.758125+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\t',			#stamp : 'PolPerezCastillo 11/12/2022 14:52',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ Pasta new moneda: self moneda; quantitat: (self quantitat + aPasta quantitat) ]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 14:54',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:56:21.403337+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = (Pasta new moneda: \'EUR\'; quantitat: 15).\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 14:56',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:57:25.657473+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpProtocolAddition {		#behavior : RGMetaclassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Pasta class\r\tinstanceVariableNames: \'\''			},			#name : #'Pasta class',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#baseClass : RGClassDefinition {				#annotations : IdentityDictionary {					#superclassName : 'Object',					#traitCompositionSource : '{}',					#definitionSource : 'Object subclass: #Pasta\r\tinstanceVariableNames: \'moneda quantitat\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'ProvesCAP2022\''				},				#name : #Pasta,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #Pasta,							#isMetaSide : false						},						#name : #moneda,						#parent : @12					},					RGInstanceVariableDefinition {						#annotations : IdentityDictionary {							#className : #Pasta,							#isMetaSide : false						},						#name : #quantitat,						#parent : @12					}				],				#metaClass : @7,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #Pasta,						#isMetaSide : false					},					#parent : @12,					#content : 'Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:\r\rFor the Class part:  State a one line summary. For example, "I represent a paragraph of text".\r\rFor the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.\r\rFor the Collaborators Part: State my main collaborators and one line about how I interact with them. \r\rPublic API and Key Messages\r\r- message one   \r- message two \r- (for bonus points) how to create instances.\r\r   One simple example is simply gorgeous.\r \rInternal Representation and Key Implementation Points.\r\r    Instance Variables\r\tmoneda:\t\t<Object>\r\tquantitat:\t\t<Object>\r\r\r    Implementation Points',					#stamp : '<historical>'				},				#classVariables : OrderedCollection [ ],				#category : #ProvesCAP2022,				#package : #ProvesCAP2022,				#sharedPools : OrderedCollection [ ]			}		},		#protocol : #'instance creation'	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T14:59:24.967099+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Pasta class',				#isMetaSide : true			},			#name : #'moneda:quantitat:',			#protocol : #'instance creation',			#sourceCode : 'moneda: aString quantitat: aNumber\r\t^ self new moneda: aString; quantitat: aNumber ',			#stamp : 'PolPerezCastillo 11/12/2022 14:59',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:00:13.640913+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ Pasta new moneda: self moneda; quantitat: (self quantitat + aPasta quantitat) ]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 14:54',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ Pasta moneda: self moneda quantitat: (self quantitat + aPasta quantitat) ]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:00:40.795381+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := (Pasta new moneda: \'EUR\'; quantitat: 5).\r\teur10 := (Pasta new moneda: \'EUR\'; quantitat: 10).\r\teur20 := (Pasta new moneda: \'EUR\'; quantitat: 20).',			#stamp : 'PolPerezCastillo 11/12/2022 14:38',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := (Pasta moneda: \'EUR\' quantitat: 5).\r\teur10 := (Pasta moneda: \'EUR\' quantitat: 10).\r\teur20 := (Pasta moneda: \'EUR\' quantitat: 20).',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:00:52.45069+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta new moneda: \'EUR\'; quantitat: 10).\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 14:31',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta moneda: \'EUR\' quantitat: 10).\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:00:59.68435+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = (Pasta new moneda: \'EUR\'; quantitat: 15).\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 14:56',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = (Pasta moneda: \'EUR\' quantitat: 15).\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:05:52.435259+01:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Number',				#traitCompositionSource : '{}',				#definitionSource : 'Number subclass: #Integer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Kernel-Numbers\''			},			#name : #Integer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Integer class\r\tinstanceVariableNames: \'\''				},				#name : #'Integer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Integer,					#isMetaSide : false				},				#parent : @7,				#content : 'I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.\r\t\rInteger division consists of:\r\t/\texact division, answers a fraction if result is not a whole integer\r\t//\tanswers an Integer, rounded towards negative infinity\r\t\\\\\tis modulo rounded towards negative infinity\r\tquo: truncated division, rounded towards zero',				#stamp : '<historical>'			},			#classVariables : OrderedCollection [ ],			#category : #Kernel-Numbers,			#package : #Kernel,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'*ProvesCAP2022'	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:06:32.249713+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Integer,				#isMetaSide : false			},			#name : #euro,			#protocol : #'*ProvesCAP2022',			#sourceCode : 'euro\r\t^ Pasta moneda: \'EUR\' quantitat: self',			#stamp : 'PolPerezCastillo 11/12/2022 15:06',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:07:58.100324+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := (Pasta moneda: \'EUR\' quantitat: 5).\r\teur10 := (Pasta moneda: \'EUR\' quantitat: 10).\r\teur20 := (Pasta moneda: \'EUR\' quantitat: 20).',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #setup,			#sourceCode : 'setUp\r\teur5 := 5 euro.\r\teur10 := 10 euro.\r\teur20 := 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:07',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:08:21.943779+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = (Pasta moneda: \'EUR\' quantitat: 10).\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testIguals,			#protocol : #tests,			#sourceCode : 'testIguals\r\tself assert: eur5 = eur5.\r\tself assert: eur10 = 10 euro.\r\tself assert: eur20 ~= eur10.',			#stamp : 'PolPerezCastillo 11/12/2022 15:08',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:08:31.278545+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = (Pasta moneda: \'EUR\' quantitat: 15).\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 15:08',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:09:05.470816+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ Pasta moneda: self moneda quantitat: (self quantitat + aPasta quantitat) ]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 15:00',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pasta,				#isMetaSide : false			},			#name : #'+',			#protocol : #arithmetic,			#sourceCode : '+ aPasta\r\t^ self moneda = aPasta moneda \r\t\tifTrue: [ (self quantitat + aPasta quantitat) euro]\r\t\tifFalse: [ self error: \'No es poden utilitzar monedes diferents\' ]',			#stamp : 'PolPerezCastillo 11/12/2022 15:09',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:09:23.195025+01:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = eur20.',			#stamp : 'PolPerezCastillo 11/12/2022 15:08',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:09',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:10:00.886548+01:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: eur5 + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:09',			#package : #ProvesCAP2022		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PastaTest,				#isMetaSide : false			},			#name : #testSumes,			#protocol : #tests,			#sourceCode : 'testSumes\r\tself assert: 5 euro + eur5 = eur10.\r\tself assert: eur5 + eur10 = 15 euro.\r\tself assert: (eur5 + eur5+ eur10) = 20 euro.',			#stamp : 'PolPerezCastillo 11/12/2022 15:10',			#package : #ProvesCAP2022		}	}}OmEntry {	#tags : {		#author : 'PolPerezCastillo',		#time : DateAndTime [ '2022-11-12T15:20:09.421718+01:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMonticelloVersionSave {		#versionName : 'ProvesCAP2022-PolPerezCastillo.1',		#repositoryDescription : '/home/polete146/Escritorio/UNI/SW/CAP/Final/Pharo_Parcial/pharo-local/package-cache'	}}