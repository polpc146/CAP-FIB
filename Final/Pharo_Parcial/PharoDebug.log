THERE_BE_DRAGONS_HERE
Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:06:35.723513 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


ImageCleanerCommandLineHandler>>activate
	Receiver: an ImageCleanerCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: ImageCleanerCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	CommandLineHandler
		methodDict: 	a MethodDictionary(#activate->ImageCleanerCommandLineHandler>>#acti...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageCleanerCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tool-ImageCleaner'
		traitComposition: 	{}
		localSelectors: 	nil


[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ aCommandLinehandler activateWith: commandLine ]
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubComm...etc...
		startpc: 	34
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		handlers: 	an OrderedCollection(ImageCleanerCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'clean'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments |...etc...
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	49
		numArgs: 	0



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FT2Error: Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:06:35.756465 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:06:35.649835+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


ImageCleanerCommandLineHandler>>activate
	Receiver: an ImageCleanerCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
	Receiver: ImageCleanerCommandLineHandler
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLineArguments
	Receiver's instance variables: 
		superclass: 	CommandLineHandler
		methodDict: 	a MethodDictionary(#activate->ImageCleanerCommandLineHandler>>#acti...etc...
		format: 	65540
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ImageCleanerCommandLineHandler
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tool-ImageCleaner'
		traitComposition: 	{}
		localSelectors: 	nil


[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ aCommandLinehandler activateWith: commandLine ]
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit for: aCommandLinehandler ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubComm...etc...
		startpc: 	34
		numArgs: 	0


PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aCommandLinehandler: 	ImageCleanerCommandLineHandler
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		handlers: 	an OrderedCollection(ImageCleanerCommandLineHandler)
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 
		aString: 	'clean'
	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
	Receiver: a PharoCommandLineHandler
	Arguments and temporary variables: 

	Receiver's instance variables: 
		commandLine: 	a CommandLineArguments
		session: 	a WorkingSession
		stdout: 	a VTermOutputDriver
		stderr: 	a VTermOutputDriver


BlockClosure>>on:do:
	Receiver: [ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments |...etc...
	Arguments and temporary variables: 
		exception: 	Exit
		handlerAction: 	[ :exit | ^ self handleExit: exit ]
	Receiver's instance variables: 
		outerContext: 	PharoCommandLineHandler(BasicCommandLineHandler)>>activate
		startpc: 	49
		numArgs: 	0



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
LoadUpdatesCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
ImageCleanerCommandLineHandler>>activate
ImageCleanerCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activateSubCommand:
PharoCommandLineHandler(BasicCommandLineHandler)>>handleSubcommand
PharoCommandLineHandler(BasicCommandLineHandler)>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in PharoCommandLineHandler(BasicCommandLineHandler)>>activate
BlockClosure>>on:do:
PharoCommandLineHandler(BasicCommandLineHandler)>>activate
PharoCommandLineHandler>>activate
PharoCommandLineHandler class(CommandLineHandler class)>>activateWith:
[ super activateWith: aCommandLine ] in PharoCommandLineHandler class>>activateWith:
NonInteractiveUIManager(UIManager)>>defer:
PharoCommandLineHandler class>>activateWith:
[ aCommandLinehandler activateWith: commandLine ] in BasicCommandLineHandler>>activateSubCommand:
BlockClosure>>on:do:
BasicCommandLineHandler>>activateSubCommand:
BasicCommandLineHandler>>handleSubcommand
BasicCommandLineHandler>>handleArgument:
[ self
	handleArgument:
		(self arguments
			ifEmpty: [ '' ]
			ifNotEmpty: [ :arguments | arguments first ]) ] in BasicCommandLineHandler>>activate
BlockClosure>>on:do:
BasicCommandLineHandler>>activate
[ self new activate ] in BasicCommandLineHandler class>>startUp:
BlockClosure>>cull:
WorkingSession>>executeDeferredStartupActions:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
LoadUpdatesCommandLineHandler>>activate
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:08:30.927125 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


WorldState class>>quitSession
	Receiver: WorldState
	Arguments and temporary variables: 
		save: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #activeHand...etc...
		format: 	65548
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldState. OSWindowWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->true #DebugShowDamage->false #Deferr...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil


WorldMorph(PasteUpMorph)>>windowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>handleWindowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


WorldMorph(Morph)>>handleEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MorphicEventDispatcher>>dispatchWindowEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleWindowEvent:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		morph: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FT2Error: Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:08:30.958832 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:08:30.812492+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


WorldState class>>quitSession
	Receiver: WorldState
	Arguments and temporary variables: 
		save: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #activeHand...etc...
		format: 	65548
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldState. OSWindowWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->true #DebugShowDamage->false #Deferr...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil


WorldMorph(PasteUpMorph)>>windowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>handleWindowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


WorldMorph(Morph)>>handleEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MorphicEventDispatcher>>dispatchWindowEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleWindowEvent:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		morph: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:12:23.307981 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


WorldState class>>quitSession
	Receiver: WorldState
	Arguments and temporary variables: 
		save: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #activeHand...etc...
		format: 	65548
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldState. OSWindowWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->true #DebugShowDamage->false #Deferr...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil


WorldMorph(PasteUpMorph)>>windowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>handleWindowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


WorldMorph(Morph)>>handleEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MorphicEventDispatcher>>dispatchWindowEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleWindowEvent:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		morph: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
FT2Error: Freetype2 primitive failed [error -1][can't get error string]
12 November 2022 11:12:23.340676 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aString: 	'Freetype2 primitive failed'
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>primCopyToExternalMemory:
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 
		aByteArray: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 ...etc...
	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


FreeTypeExternalMemory>>validate
	Receiver: a FreeTypeExternalMemory<nil>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	nil
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...


EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		bytes: 	#[0 1 0 0 0 20 1 0 0 4 0 64 66 65 83 69 101 30 93 189 0 2 159 20 0 0 0 7...etc...
		originalFileBaseName: 	'SourceCodePro-Regular.ttf'
		numFaces: 	nil
		info: 	nil
		cachedInfo: 	nil
		cachedNumFaces: 	nil
		externalMem: 	a FreeTypeExternalMemory<nil>
		i: 	0
		face: 	nil
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
	Receiver: SourceCodeProRegular
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	EmbeddedFreeTypeFontFontDescription
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceCodeProRegular
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
		each: 	SourceCodeProRegular
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(SourceCodeProRegular SourceSansProRegular LucidaGrandeRegular)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installFontsIn: provider ]
		index: 	1
	Receiver's instance variables: 
		array: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		firstIndex: 	1
		lastIndex: 	3


EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
	Receiver: EmbeddedFreeTypeFontFontDescription
	Arguments and temporary variables: 
		provider: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SourceCodeProRegular. SourceSansProRegular. LucidaGrandeRegular}
		name: 	#EmbeddedFreeTypeFontFontDescription
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#EmbeddedFreeType
		traitComposition: 	{}
		localSelectors: 	nil


EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
	Receiver: an EmbeddedFreeTypeFontInstaller
	Arguments and temporary variables: 
		aProvider: 	a FreeTypeFontProvider
	Receiver's instance variables: 
		embeddedFileInfoCache: 	a Dictionary(#(197644 0)->a Set() )
		provider: 	a FreeTypeFontProvider


[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 
		each: 	an EmbeddedFreeTypeFontInstaller
	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


OrderedCollection>>do:
	Receiver: an OrderedCollection(an EmbeddedFreeTypeFontInstaller)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each installAllFontsIn: self ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an EmbeddedFreeTypeFontInstaller nil nil nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
	Receiver: a FreeTypeFontProvider
	Arguments and temporary variables: 

	Receiver's instance variables: 
		fileInfos: 	an OrderedCollection()
		fileInfoCache: 	a Dictionary()
		tempFileInfos: 	nil
		families: 	a Dictionary()
		tempFamilies: 	nil
		fontInstallers: 	an OrderedCollection(an EmbeddedFreeTypeFontInstaller)


FreeTypeSettings class>>updateFreeType
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


FreeTypeSettings class>>startUp:
	Receiver: FreeTypeSettings
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#bitBltSubPixelAvailable->FreeTypeSettings>>#bit...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#FreeTypeSettings
		classPool: 	a Dictionary(#UpdateFontsAtImageStartup->false )
		sharedPools: 	an OrderedCollection(FT2Constants FreeTypeCacheConstants)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'FreeType-Settings'
		traitComposition: 	{}
		localSelectors: 	nil
		current: 	a FreeTypeSettings


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(FreeTypeSettings)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#FreeTypeSettings


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(FreeTypeSettings)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	47
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2022-11-12T11:12:23.19271+01:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a DefaultExecutionEnvironment
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
a DefaultExecutionEnvironment

DefaultExecutionEnvironment class>>beActiveDuring:
	Receiver: DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ ^ SessionManager default snapshot: save andQuit: quit ]
	Receiver's instance variables: 
		superclass: 	ExecutionEnvironment
		methodDict: 	a MethodDictionary(#prepareForNewProcess:->DefaultExecutionEnvironm...etc...
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#DefaultExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		instance: 	a DefaultExecutionEnvironment


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection()
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	an Object
		vm: 	a VirtualMachine


WorldState class>>quitSession
	Receiver: WorldState
	Arguments and temporary variables: 
		save: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->WorldState>>#activeHand #activeHand...etc...
		format: 	65548
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldState. OSWindowWorldState}
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->true #DebugShowDamage->false #Deferr...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil


WorldMorph(PasteUpMorph)>>windowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>handleWindowEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


WorldMorph(Morph)>>handleEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) an ImageMorph(342771456))
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (958298112) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MorphicEventDispatcher>>dispatchWindowEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleWindowEvent:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
	Receiver's instance variables: 
		morph: 	nil


WindowEvent>>sentTo:
	Receiver: [windowClose ((0@0) corner: (0@0))]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	110792
		source: 	nil
		windowIndex: 	nil
		action: 	2
		rectangle: 	(0@0) corner: (0@0)


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[windowClose ((0@0) corner: (0@0))]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil



--- The full stack ---
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed:
FreeTypeExternalMemory(FT2Handle)>>primitiveFailed
FreeTypeExternalMemory>>primCopyToExternalMemory:
FreeTypeExternalMemory>>validate
EmbeddedFreeTypeFontInstaller>>addFromFileContents:baseName:
SourceCodeProRegular class(EmbeddedFreeTypeFontFontDescription class)>>installFontsIn:
[ :each | each installFontsIn: provider ] in EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
OrderedCollection>>do:
EmbeddedFreeTypeFontFontDescription class>>installAllFontsIn:
EmbeddedFreeTypeFontInstaller>>installAllFontsIn:
[ :each | each installAllFontsIn: self ] in FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
OrderedCollection>>do:
FreeTypeFontProvider>>updateEmbeddedFreeTypeFonts
FreeTypeSettings class>>updateFreeType
FreeTypeSettings class>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>quitSession
WorldMorph(PasteUpMorph)>>windowEvent:
WorldMorph(Morph)>>handleWindowEvent:
WindowEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchWindowEvent:with:
MorphicEventDispatcher>>handleWindowEvent:
WindowEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bitshift:
12 November 2022 11:34:36.323306 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bitshift:
	Receiver: 10
	Arguments and temporary variables: 
		aMessage: 	bitshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bitshift:
		resumeValue: 	nil
	Receiver's instance variables: 
10

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ 10 bitshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(574592512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(466414080))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(574592512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1046963
		lastStepMessage: 	nil
		lastCycleTime: 	1061459
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1061436
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(272430080) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1046963
		lastStepMessage: 	nil
		lastCycleTime: 	1061459
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1061436
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1046963
		lastStepMessage: 	nil
		lastCycleTime: 	1061459
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1061436
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(272430080) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bitshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bitshift:
12 November 2022 11:34:45.401988 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bitshift:
	Receiver: 10
	Arguments and temporary variables: 
		aMessage: 	bitshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bitshift:
		resumeValue: 	nil
	Receiver's instance variables: 
10

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'10 bitshift: 2'
		itsSelection: 	a Text for '10 bitshift: 2'
		itsSelectionString: 	'10 bitshift: 2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 10 bitshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(574592512)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1070540
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1070541
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1070540
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1070541
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(673740288))(a FadingMorp...etc...
		lastStepTime: 	1070519
		lastStepMessage: 	nil
		lastCycleTime: 	1070541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1070519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1070541
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(673740288))(a FadingMorp...etc...
		lastStepTime: 	1070519
		lastStepMessage: 	nil
		lastCycleTime: 	1070541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1070519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(673740288))(a FadingMorp...etc...
		lastStepTime: 	1070519
		lastStepMessage: 	nil
		lastCycleTime: 	1070541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1070519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(673740288) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(673740288))(a FadingMorp...etc...
		lastStepTime: 	1070519
		lastStepMessage: 	nil
		lastCycleTime: 	1070541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1070519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(673740288))(a FadingMorp...etc...
		lastStepTime: 	1070519
		lastStepMessage: 	nil
		lastCycleTime: 	1070541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(478074880)))
		lastAlarmTime: 	1070519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(673740288) a GLMSys...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bitshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bitshift:
12 November 2022 11:34:53.723717 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bitshift:
	Receiver: 10
	Arguments and temporary variables: 
		aMessage: 	bitshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bitshift:
		resumeValue: 	nil
	Receiver's instance variables: 
10

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'10 bitshift: 2'
		itsSelection: 	a Text for '10 bitshift: 2'
		itsSelectionString: 	'10 bitshift: 2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 10 bitshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(77950976)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(574592512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(574592512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(557430784))(a FadingMorp...etc...
		lastStepTime: 	1078862
		lastStepMessage: 	nil
		lastCycleTime: 	1078845
		alarms: 	a Heap()
		lastAlarmTime: 	1078822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(557430784) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(557430784))(a FadingMorp...etc...
		lastStepTime: 	1078862
		lastStepMessage: 	nil
		lastCycleTime: 	1078845
		alarms: 	a Heap()
		lastAlarmTime: 	1078822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(557430784))(a FadingMorp...etc...
		lastStepTime: 	1078862
		lastStepMessage: 	nil
		lastCycleTime: 	1078845
		alarms: 	a Heap()
		lastAlarmTime: 	1078822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(557430784))(a FadingMorp...etc...
		lastStepTime: 	1078862
		lastStepMessage: 	nil
		lastCycleTime: 	1078845
		alarms: 	a Heap()
		lastAlarmTime: 	1078822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(557430784) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(112496128)
	Arguments and temporary variables: 
		aPoint: 	(672@320)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(77950976)
	Receiver's instance variables: 
		bounds: 	(670.0@312.0) corner: (879.0@550.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(950946816)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(670.0@312.0) corner: (879.0@550.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (993592832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(769788928)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(112496128)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(670.0@312.0) corner: (879.0@550.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(950946816)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(670.0@312.0) corner: (879.0@550.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (993592832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(769788928)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(112496128)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(670.0@312.0) corner: (879.0@550.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(950946816)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(670.0@312.0) corner: (879.0@550.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (993592832) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(769788928)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(112496128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		evt: 	[(67@14) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(67@14) mouseDown yellow 1077103 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(77950976)
	Receiver's instance variables: 
		timeStamp: 	1077103
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(67@14)
		handler: 	a RubEditingArea(77950976)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
		aMorph: 	a RubEditingArea(77950976)
		globalPt: 	(67@14)
		localEvt: 	[(67@14) mouseDown yellow 1077103 nil]
		index: 	4
		child: 	a RubPrimarySelectionMorph(968932352)
		morphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880) a...etc...
		handler: 	a RubEditingArea(77950976)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(574592512)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(67@14) mouseDown yellow 1077103 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1077103
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(67@14)
		handler: 	a RubEditingArea(77950976)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
		aMorph: 	a RubEditingArea(77950976)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
		aMorph: 	a RubEditingArea(77950976)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(77950976)
	Arguments and temporary variables: 
		anEvent: 	[(67@14) mouseDown yellow 1077103 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(157565952)
		submorphs: 	an Array(a RubPrimarySelectionMorph(968932352) a RubCursor(478074880...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (198203904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(367382016)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(478074880)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(109726208))
		getMenuPolicy: 	a RubEditingArea(77950976)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
		aMorph: 	a TransformWithLayoutMorph(157565952)
		globalPt: 	(672@320)
		localEvt: 	[(67@14) mouseDown yellow 1077103 nil]
		index: 	1
		child: 	a RubEditingArea(77950976)
		morphs: 	an Array(a RubEditingArea(77950976))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(574592512)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(672@320) mouseDown yellow 1077103 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1077103
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(672@320)
		handler: 	a RubScrolledTextMorph(574592512)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
		aMorph: 	a TransformWithLayoutMorph(157565952)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
		aMorph: 	a TransformWithLayoutMorph(157565952)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(157565952)
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(605@306) corner: (1185@636)
		owner: 	a RubTextScrollPane(367382016)
		submorphs: 	an Array(a RubEditingArea(77950976))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (333569024) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-605@ -306))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
		aMorph: 	a RubTextScrollPane(367382016)
		globalPt: 	(672@320)
		localEvt: 	[(672@320) mouseDown yellow 1077103 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(157565952)
		morphs: 	an Array(a TransformWithLayoutMorph(157565952))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(574592512)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(672@320) mouseDown yellow 1077103 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(672@320) mouseDown yellow 1077103 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1077103
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(672@320)
		handler: 	a RubScrolledTextMorph(574592512)
		wasHandled: 	false
		whichButton: 	2



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bitshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bithshift:
12 November 2022 11:35:27.069245 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bithshift:
	Receiver: 10
	Arguments and temporary variables: 
		aMessage: 	bithshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bithshift:
		resumeValue: 	nil
	Receiver's instance variables: 
10

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'10 bithshift: 2'
		itsSelection: 	a Text for '10 bithshift: 2'
		itsSelectionString: 	'10 bithshift: 2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 10 bithshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(24267776)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(24267776)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(24267776)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(24267776)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubEditingArea(Object)>>perform:orSendTo:
	Receiver: a RubEditingArea(24267776)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (135@50)
		owner: 	a TransformWithLayoutMorph(924124672)
		submorphs: 	an Array(a RubPrimarySelectionMorph(174622720) a RubCursor(866056704...etc...
		fullBounds: 	(0@0) corner: (135@50)
		color: 	Color transparent
		extension: 	a MorphExtension (1001828352) [other:  (announcer -> an Announcer) (...etc...
		model: 	Transcript
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(791362560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(866056704)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(24267776)
		mouseDownPoint: 	nil
		wrapped: 	false
		editorClass: 	RubSmalltalkEditor


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		evt: 	[(850@451) mouseUp 1112193 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		evt: 	[(850@451) mouseUp 1112193 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		evt: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(850@451) mouseUp 1112193 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1020008960)'Do it'
	Receiver's instance variables: 
		timeStamp: 	1112193
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(850@451)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a ToggleMenuItemMorph(1020008960)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(850@451) mouseUp 1112193 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1112193
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(850@451)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a ToggleMenuItemMorph(1020008960)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a ToggleMenuItemMorph(1020008960)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1020008960)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(783.0@442.0) corner: (982.0@459.0)
		owner: 	a MenuMorph(584212992)
		submorphs: 	#()
		fullBounds: 	(783.0@442.0) corner: (982.0@459.0)
		color: 	Color black
		extension: 	a MorphExtension (384107520)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubEditingArea(24267776)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a MenuMorph(584212992)
		localEvt: 	[(850@451) mouseUp 1112193 nil]
		index: 	2
		child: 	a ToggleMenuItemMorph(1020008960)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(991362560)'Suggestions...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(850@451) mouseUp 1112193 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1112193
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(850@451)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a MenuMorph(584212992)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		aMorph: 	a MenuMorph(584212992)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(1020008960)'Do it'


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(584212992)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(778.0@418.0) corner: (987.0@777.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(991362560)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(778.0@418.0) corner: (987.0@777.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (740457984) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1020008960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(584212992)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(778.0@418.0) corner: (987.0@777.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(991362560)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(778.0@418.0) corner: (987.0@777.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (740457984) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1020008960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(584212992)
	Arguments and temporary variables: 
		evt: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(778.0@418.0) corner: (987.0@777.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(991362560)'Suggestions...' a ToggleMe...etc...
		fullBounds: 	(778.0@418.0) corner: (987.0@777.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (740457984) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(1020008960)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		focusHolder: 	a MenuMorph(584212992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(850@451) corner: (866@467)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(850@451) corner: (866@467)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(850@451) mouseUp 1112193 nil]
		targetOffset: 	(67.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1112193 850 451 0 0 0 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(850@451) mouseOver red 1112139 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a SystemWindow(58147328) an Image...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		focusHolder: 	a MenuMorph(584212992)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(850@451) corner: (866@467)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(850@451) corner: (866@467)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(850@451) mouseUp 1112193 nil]
		targetOffset: 	(67.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1112193 850 451 0 0 0 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		focusHolder: 	a MenuMorph(584212992)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(850@451) corner: (866@467)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(850@451) corner: (866@467)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(850@451) mouseUp 1112193 nil]
		targetOffset: 	(67.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1112193 850 451 0 0 0 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(850@451) corner: (866@467)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(850@451) corner: (866@467)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(850@451) mouseUp 1112193 nil]
		targetOffset: 	(67.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1112193 850 451 0 0 0 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(850@451) mouseUp 1112193 nil]
		evt: 	[(850@451) mouseUp 1112193 nil]
	Receiver's instance variables: 
		bounds: 	(850@451) corner: (866@467)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(850@451) corner: (866@467)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(850@451) mouseUp 1112193 nil]
		targetOffset: 	(67.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1112193 850 451 0 0 0 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bithshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubEditingArea(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubPluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bitshift:
12 November 2022 11:35:45.524699 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bitshift:
	Receiver: 10
	Arguments and temporary variables: 
		aMessage: 	bitshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bitshift:
		resumeValue: 	nil
	Receiver's instance variables: 
10

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ 10 bitshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(817783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(817783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(597651456)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(619562496))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(597651456)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1094855
		lastStepMessage: 	nil
		lastCycleTime: 	1130665
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(65798656)))
		lastAlarmTime: 	1130642
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(18387456) an Im...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1094855
		lastStepMessage: 	nil
		lastCycleTime: 	1130665
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(65798656)))
		lastAlarmTime: 	1130642
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1094855
		lastStepMessage: 	nil
		lastCycleTime: 	1130665
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(65798656)))
		lastAlarmTime: 	1130642
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(18387456) an Im...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bitshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #bitshift:
12 November 2022 11:35:59.235093 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #bitshift:
	Receiver: 0
	Arguments and temporary variables: 
		aMessage: 	bitshift: 2
		exception: 	MessageNotUnderstood: SmallInteger>>bitshift:
		resumeValue: 	nil
	Receiver's instance variables: 
0

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'0 bitshift: 2'
		itsSelection: 	a Text for '0 bitshift: 2'
		itsSelectionString: 	'0 bitshift: 2'
	Receiver's instance variables: 
		ast: 	DoIt
	^ 0 bitshift: 2
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(817783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(817783808)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(597651456)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(597651456)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(791517696))(a FadingMorp...etc...
		lastStepTime: 	1144372
		lastStepMessage: 	nil
		lastCycleTime: 	1144368
		alarms: 	a Heap()
		lastAlarmTime: 	1144346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(791517696) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(791517696))(a FadingMorp...etc...
		lastStepTime: 	1144372
		lastStepMessage: 	nil
		lastCycleTime: 	1144368
		alarms: 	a Heap()
		lastAlarmTime: 	1144346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(791517696))(a FadingMorp...etc...
		lastStepTime: 	1144372
		lastStepMessage: 	nil
		lastCycleTime: 	1144368
		alarms: 	a Heap()
		lastAlarmTime: 	1144346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneSubCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		currentHand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(791517696))(a FadingMorp...etc...
		lastStepTime: 	1144372
		lastStepMessage: 	nil
		lastCycleTime: 	1144368
		alarms: 	a Heap()
		lastAlarmTime: 	1144346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneSubCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a FadingMorph(791517696) a GLMSys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


MenuMorph>>invokeModalAt:in:allowKeyboard:
	Receiver: a MenuMorph(273125888)
	Arguments and temporary variables: 
		aPoint: 	(874@495)
		aWorld: 	a WorldMorph(562956288) [world]
		aBoolean: 	true
		w: 	a WorldMorph(562956288) [world]
		originalFocusHolder: 	a RubEditingArea(817783808)
	Receiver's instance variables: 
		bounds: 	(872.0@487.0) corner: (1081.0@725.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(232580096)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(872.0@487.0) corner: (1081.0@725.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (454223872) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(286287872)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal:
	Receiver: a MenuMorph(273125888)
	Arguments and temporary variables: 
		allowKeyboardControl: 	true
	Receiver's instance variables: 
		bounds: 	(872.0@487.0) corner: (1081.0@725.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(232580096)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(872.0@487.0) corner: (1081.0@725.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (454223872) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(286287872)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>invokeModal
	Receiver: a MenuMorph(273125888)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(872.0@487.0) corner: (1081.0@725.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(232580096)'Do it and go' a ToggleMenu...etc...
		fullBounds: 	(872.0@487.0) corner: (1081.0@725.0)
		color: 	(Color r: 0.894 g: 0.894 b: 0.894 alpha: 1.0)
		extension: 	a MorphExtension (454223872) [other:  (basicColor -> (Color r: 0.823...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.674 g: 0.674 b: 0.674 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(286287872)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		shiftKeyState: 	false
		menu: 	a MenuMorph(273125888)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>mouseDown:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		evt: 	[(46@16) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>handleMouseDown:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MouseButtonEvent>>sentTo:
	Receiver: [(46@16) mouseDown yellow 1141060 nil]
	Arguments and temporary variables: 
		anObject: 	a RubEditingArea(817783808)
	Receiver's instance variables: 
		timeStamp: 	1141060
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(46@16)
		handler: 	a RubEditingArea(817783808)
		wasHandled: 	true
		whichButton: 	2


RubEditingArea(Morph)>>handleEvent:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
		aMorph: 	a RubEditingArea(817783808)
		globalPt: 	(46@16)
		localEvt: 	[(46@16) mouseDown yellow 1141060 nil]
		index: 	3
		child: 	a RubPrimarySelectionMorph(1001439232)
		morphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232))
		handler: 	a RubEditingArea(817783808)
		inside: 	false
		lastHandler: 	a RubScrolledTextMorph(597651456)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(46@16) mouseDown yellow 1141060 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1141060
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(46@16)
		handler: 	a RubEditingArea(817783808)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
		aMorph: 	a RubEditingArea(817783808)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
		aMorph: 	a RubEditingArea(817783808)
	Receiver's instance variables: 
		morph: 	nil


RubEditingArea(Morph)>>processEvent:using:
	Receiver: a RubEditingArea(817783808)
	Arguments and temporary variables: 
		anEvent: 	[(46@16) mouseDown yellow 1141060 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(950764032)
		submorphs: 	an Array(a RubCursor(65798656) a RubPrimarySelectionMorph(1001439232...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (286618624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(397155840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(65798656)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(77605376))
		getMenuPolicy: 	a RubEditingArea(817783808)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
		aMorph: 	a TransformWithLayoutMorph(950764032)
		globalPt: 	(874@495)
		localEvt: 	[(46@16) mouseDown yellow 1141060 nil]
		index: 	1
		child: 	a RubEditingArea(817783808)
		morphs: 	an Array(a RubEditingArea(817783808))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(597651456)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(874@495) mouseDown yellow 1141060 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1141060
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(874@495)
		handler: 	a RubScrolledTextMorph(597651456)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
		aMorph: 	a TransformWithLayoutMorph(950764032)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
		aMorph: 	a TransformWithLayoutMorph(950764032)
	Receiver's instance variables: 
		morph: 	nil


TransformWithLayoutMorph(Morph)>>processEvent:using:
	Receiver: a TransformWithLayoutMorph(950764032)
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(828@479) corner: (1408@809)
		owner: 	a RubTextScrollPane(397155840)
		submorphs: 	an Array(a RubEditingArea(817783808))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (910527488) [other:  (kmDispatcher -> a KMDispatche...etc...
		transform: 	a MorphicTransform(angle = 0.0; scale = 1.0; offset = (-828@ -479))
		smoothing: 	1
		localBounds: 	nil


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
		aMorph: 	a RubTextScrollPane(397155840)
		globalPt: 	(874@495)
		localEvt: 	[(874@495) mouseDown yellow 1141060 nil]
		index: 	1
		child: 	a TransformWithLayoutMorph(950764032)
		morphs: 	an Array(a TransformWithLayoutMorph(950764032))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a RubScrolledTextMorph(597651456)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(874@495) mouseDown yellow 1141060 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(874@495) mouseDown yellow 1141060 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	1141060
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(874@495)
		handler: 	a RubScrolledTextMorph(597651456)
		wasHandled: 	false
		whichButton: 	2



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #bitshift:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
LazyTabGroupMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMMorphBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMScrollPaneBandBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerScrollBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMPagerBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMFoundationBrick(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
GLMSystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
12 November 2022 12:44:58.988863 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 4
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
4

ByteString(String)>>compare:with:collated:
	Receiver: '50'
	Arguments and temporary variables: 
		string1: 	'50'
		string2: 	4
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'50'

ByteString(String)>><
	Receiver: '50'
	Arguments and temporary variables: 
		aString: 	4
	Receiver's instance variables: 
'50'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		randomNumber: 	4
		myNumber: 	'50'
		attempts: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRandom...etc...
		itsSelection: 	a Text for '|randomNumber myNumber attempts|

randomNumber := 100...etc...
		itsSelectionString: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRa...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| randomNumber myNumber attempts |
	randomNumber := 100 atRandom.
	a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(224035840)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(832065536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879644160) a RubCursor(557664256...etc...
		fullBounds: 	(0@0) corner: (567@354)
		color: 	Color transparent
		extension: 	a MorphExtension (106757632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(115712512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(557664256)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(53470720))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5284117
		lastStepMessage: 	nil
		lastCycleTime: 	5284101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5284117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5284117
		lastStepMessage: 	nil
		lastCycleTime: 	5284101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5284117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5284117
		lastStepMessage: 	nil
		lastCycleTime: 	5284101
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5284117
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
12 November 2022 12:45:39.891127 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 66
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
66

ByteString(String)>>compare:with:collated:
	Receiver: '50'
	Arguments and temporary variables: 
		string1: 	'50'
		string2: 	66
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'50'

ByteString(String)>><
	Receiver: '50'
	Arguments and temporary variables: 
		aString: 	66
	Receiver's instance variables: 
'50'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		randomNumber: 	66
		myNumber: 	'50'
		attempts: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRandom...etc...
		itsSelection: 	a Text for '|randomNumber myNumber attempts|

randomNumber := 100...etc...
		itsSelectionString: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRa...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| randomNumber myNumber attempts |
	randomNumber := 100 atRandom.
	a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(224035840)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(832065536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879644160) a RubCursor(557664256...etc...
		fullBounds: 	(0@0) corner: (567@354)
		color: 	Color transparent
		extension: 	a MorphExtension (106757632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(115712512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(557664256)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(652835840))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5325022
		lastStepMessage: 	nil
		lastCycleTime: 	5325011
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5325022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5325022
		lastStepMessage: 	nil
		lastCycleTime: 	5325011
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5325022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5325022
		lastStepMessage: 	nil
		lastCycleTime: 	5325011
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5325022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
12 November 2022 12:46:18.635186 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 20
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
20

ByteString(String)>>compare:with:collated:
	Receiver: '5'
	Arguments and temporary variables: 
		string1: 	'5'
		string2: 	20
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'5'

ByteString(String)>><
	Receiver: '5'
	Arguments and temporary variables: 
		aString: 	20
	Receiver's instance variables: 
'5'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'[ randomNumber  = myNumber ] 
	whileFalse: [ 
		Transcript sho...etc...
		itsSelection: 	a Text for '[ randomNumber  = myNumber ] 
	whileFalse: [ 
		Trans...etc...
		itsSelectionString: 	'[ randomNumber  = myNumber ] 
	whileFalse: [ 
		Transcript...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ [ randomNumber = myNumber ]
		whileFalse: [ Transcript
				show:
	...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(224035840)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(832065536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879644160) a RubCursor(557664256...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (106757632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(115712512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(557664256)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(732731904))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5363751
		lastStepMessage: 	nil
		lastCycleTime: 	5363772
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5363751
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5363751
		lastStepMessage: 	nil
		lastCycleTime: 	5363772
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5363751
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	5363751
		lastStepMessage: 	nil
		lastCycleTime: 	5363772
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5363751
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #isByteString
12 November 2022 12:46:43.020702 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #isByteString
	Receiver: 52
	Arguments and temporary variables: 
		aMessage: 	isByteString
		exception: 	MessageNotUnderstood: SmallInteger>>isByteString
		resumeValue: 	nil
	Receiver's instance variables: 
52

ByteString(String)>>compare:with:collated:
	Receiver: '50'
	Arguments and temporary variables: 
		string1: 	'50'
		string2: 	52
		order: 	#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26...etc...
	Receiver's instance variables: 
'50'

ByteString(String)>><
	Receiver: '50'
	Arguments and temporary variables: 
		aString: 	52
	Receiver's instance variables: 
'50'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		randomNumber: 	52
		myNumber: 	'50'
		attempts: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRandom...etc...
		itsSelection: 	a Text for '|randomNumber myNumber attempts|

randomNumber := 100...etc...
		itsSelectionString: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRa...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| randomNumber myNumber attempts |
	randomNumber := 100 atRandom.
	a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(224035840)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@354)
		owner: 	a TransformWithLayoutMorph(832065536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879644160) a RubCursor(557664256...etc...
		fullBounds: 	(0@0) corner: (567@354)
		color: 	Color transparent
		extension: 	a MorphExtension (106757632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(115712512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(557664256)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(239647232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5388146
		lastStepMessage: 	nil
		lastCycleTime: 	5388136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5388146
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5388146
		lastStepMessage: 	nil
		lastCycleTime: 	5388136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5388146
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	5388146
		lastStepMessage: 	nil
		lastCycleTime: 	5388136
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5388146
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #isByteString
ByteString(String)>>compare:with:collated:
ByteString(String)>><
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#asInteger was sent to nil
12 November 2022 12:50:38.77931 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #asInteger
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asInteger
		exception: 	MessageNotUnderstood: receiver of "asInteger" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		randomNumber: 	34
		myNumber: 	nil
		attempts: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRandom...etc...
		itsSelection: 	a Text for '|randomNumber myNumber attempts|

randomNumber := 100...etc...
		itsSelectionString: 	'|randomNumber myNumber attempts|

randomNumber := 100 atRa...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| randomNumber myNumber attempts |
	randomNumber := 100 atRandom.
	a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(224035840)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(224035840)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (567@373)
		owner: 	a TransformWithLayoutMorph(832065536)
		submorphs: 	an Array(a RubPrimarySelectionMorph(879644160) a RubCursor(557664256...etc...
		fullBounds: 	(0@0) corner: (567@373)
		color: 	Color transparent
		extension: 	a MorphExtension (106757632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(115712512)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(557664256)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(920409088))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(234283520)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForFieldView(99136307...etc...
		lastStepTime: 	5623912
		lastStepMessage: 	nil
		lastCycleTime: 	5623901
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5623912
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForFieldView(99136307...etc...
		lastStepTime: 	5623912
		lastStepMessage: 	nil
		lastCycleTime: 	5623901
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5623912
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#onBlinkCursor -> a TextMorphForFieldView(99136307...etc...
		lastStepTime: 	5623912
		lastStepMessage: 	nil
		lastCycleTime: 	5623901
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(557664256)))
		lastAlarmTime: 	5623912
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(508843008) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asInteger
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:27:54.466605 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: true
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(nil)
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(383@326) mouseUp 7853966 nil]
		aNodeMorph: 	NodeMorph(nil)
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(383@326) mouseUp 7853966 nil]
		nodeMorph: 	NodeMorph(nil)
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(383@326) mouseUp 7853966 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	7853966
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(383@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(383@326) mouseOver red 7853912 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		evt: 	[(383@326) mouseUp 7853966 nil]
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#secondClickDown]
	Arguments and temporary variables: 
		evt: 	[(383@326) mouseUp 7853966 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(383@326) mouseUp 7853966 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#secondClickDown
		firstClickDown: 	[(383@326) mouseDown red 7853912 nil]
		firstClickUp: 	[(383@326) mouseUp 7853966 nil]
		firstClickTime: 	7853912
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	7853916


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(383@326) mouseUp 7853966 nil]
		evt: 	[(383@326) mouseUp 7853966 nil]
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(383@326) mouseUp 7853966 nil]
		evtBuf: 	#(1 7853966 383 326 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(354@367) corner: (370@383)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(354@367) corner: (370@383)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a FTPluggableIconListMorphAdaptor(209017856)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(354@367) mouseOver 7859471 nil]
		targetOffset: 	(30.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7859471 354 367 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7859479
		lastStepMessage: 	nil
		lastCycleTime: 	7859473
		alarms: 	a Heap()
		lastAlarmTime: 	7859479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7859479
		lastStepMessage: 	nil
		lastCycleTime: 	7859473
		alarms: 	a Heap()
		lastAlarmTime: 	7859479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7859479
		lastStepMessage: 	nil
		lastCycleTime: 	7859473
		alarms: 	a Heap()
		lastAlarmTime: 	7859479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7859479
		lastStepMessage: 	nil
		lastCycleTime: 	7859473
		alarms: 	a Heap()
		lastAlarmTime: 	7859479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:28:36.482952 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(384@326) mouseUp 7901622 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(384@326) mouseUp 7901622 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(384@326) mouseUp 7901622 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	7901622
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(384@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(384@326) mouseOver red 7901540 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		evt: 	[(384@326) mouseUp 7901622 nil]
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(384@326) mouseUp 7901622 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(384@326) mouseUp 7901622 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(384@326) mouseDown red 7901540 nil]
		firstClickUp: 	[(384@326) mouseUp 7901622 nil]
		firstClickTime: 	7901540
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	7901558


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(384@326) mouseUp 7901622 nil]
		evt: 	[(384@326) mouseUp 7901622 nil]
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(384@326) mouseUp 7901622 nil]
		evtBuf: 	#(1 7901622 384 326 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(384@326) corner: (400@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(384@326) corner: (400@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(384@326) mouseUp 7901622 nil]
		targetOffset: 	(61.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7901622 384 326 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7901602
		lastStepMessage: 	nil
		lastCycleTime: 	7901624
		alarms: 	a Heap()
		lastAlarmTime: 	7901602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7901602
		lastStepMessage: 	nil
		lastCycleTime: 	7901624
		alarms: 	a Heap()
		lastAlarmTime: 	7901602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7901602
		lastStepMessage: 	nil
		lastCycleTime: 	7901624
		alarms: 	a Heap()
		lastAlarmTime: 	7901602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7901602
		lastStepMessage: 	nil
		lastCycleTime: 	7901624
		alarms: 	a Heap()
		lastAlarmTime: 	7901602
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:28:38.814835 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(377@329) mouseUp 7903936 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(377@329) mouseUp 7903936 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(377@329) mouseUp 7903936 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	7903936
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(377@329)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(377@329) mouseOver red 7903864 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		evt: 	[(377@329) mouseUp 7903936 nil]
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(377@329) mouseUp 7903936 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(377@329) mouseUp 7903936 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(377@329) mouseDown red 7903864 nil]
		firstClickUp: 	[(377@329) mouseUp 7903936 nil]
		firstClickTime: 	7903864
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	7903871


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@329) mouseUp 7903936 nil]
		evt: 	[(377@329) mouseUp 7903936 nil]
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(377@329) mouseUp 7903936 nil]
		evtBuf: 	#(1 7903936 377 329 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(377@329) corner: (393@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@329) corner: (393@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@329) mouseUp 7903936 nil]
		targetOffset: 	(54.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7903936 377 329 0 0 0 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7903936
		lastStepMessage: 	nil
		lastCycleTime: 	7903958
		alarms: 	a Heap()
		lastAlarmTime: 	7903936
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7903936
		lastStepMessage: 	nil
		lastCycleTime: 	7903958
		alarms: 	a Heap()
		lastAlarmTime: 	7903936
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7903936
		lastStepMessage: 	nil
		lastCycleTime: 	7903958
		alarms: 	a Heap()
		lastAlarmTime: 	7903936
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7903936
		lastStepMessage: 	nil
		lastCycleTime: 	7903958
		alarms: 	a Heap()
		lastAlarmTime: 	7903936
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:29:40.133632 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(430@328) mouseUp 7965267 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(430@328) mouseUp 7965267 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(430@328) mouseUp 7965267 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	7965267
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(430@328)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(430@328) mouseOver red 7965205 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		evt: 	[(430@328) mouseUp 7965267 nil]
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(430@328) mouseUp 7965267 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(430@328) mouseUp 7965267 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(430@328) mouseDown red 7965205 nil]
		firstClickUp: 	[(430@328) mouseUp 7965267 nil]
		firstClickTime: 	7965205
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	7965212


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(430@328) mouseUp 7965267 nil]
		evt: 	[(430@328) mouseUp 7965267 nil]
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(430@328) mouseUp 7965267 nil]
		evtBuf: 	#(1 7965267 430 328 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(430@328) corner: (446@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(430@328) corner: (446@344)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(430@328) mouseUp 7965267 nil]
		targetOffset: 	(107.0@88.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7965267 430 328 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7965253
		lastStepMessage: 	nil
		lastCycleTime: 	7965276
		alarms: 	a Heap()
		lastAlarmTime: 	7965253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7965253
		lastStepMessage: 	nil
		lastCycleTime: 	7965276
		alarms: 	a Heap()
		lastAlarmTime: 	7965253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7965253
		lastStepMessage: 	nil
		lastCycleTime: 	7965276
		alarms: 	a Heap()
		lastAlarmTime: 	7965253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	7965253
		lastStepMessage: 	nil
		lastCycleTime: 	7965276
		alarms: 	a Heap()
		lastAlarmTime: 	7965253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:29:49.268178 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(404@329) mouseUp 7974390 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(404@329) mouseUp 7974390 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(404@329) mouseUp 7974390 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	7974390
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(404@329)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(404@329) mouseOver red 7974283 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		evt: 	[(404@329) mouseUp 7974390 nil]
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(404@329) mouseUp 7974390 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(404@329) mouseUp 7974390 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(404@329) mouseDown red 7974283 nil]
		firstClickUp: 	[(404@329) mouseUp 7974390 nil]
		firstClickTime: 	7974283
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	7974285


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(404@329) mouseUp 7974390 nil]
		evt: 	[(404@329) mouseUp 7974390 nil]
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(404@329) mouseUp 7974390 nil]
		evtBuf: 	#(1 7974390 404 329 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(404@329) corner: (420@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(404@329) corner: (420@345)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(404@329) mouseUp 7974390 nil]
		targetOffset: 	(81.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7974390 404 329 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7974390
		lastStepMessage: 	nil
		lastCycleTime: 	7974411
		alarms: 	a Heap()
		lastAlarmTime: 	7974390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7974390
		lastStepMessage: 	nil
		lastCycleTime: 	7974411
		alarms: 	a Heap()
		lastAlarmTime: 	7974390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7974390
		lastStepMessage: 	nil
		lastCycleTime: 	7974411
		alarms: 	a Heap()
		lastAlarmTime: 	7974390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	7974390
		lastStepMessage: 	nil
		lastCycleTime: 	7974411
		alarms: 	a Heap()
		lastAlarmTime: 	7974390
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:30:18.918085 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(416@339) mouseUp 8004047 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(416@339) mouseUp 8004047 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(416@339) mouseUp 8004047 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8004047
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(416@339)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(416@339) mouseOver red 8003997 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		evt: 	[(416@339) mouseUp 8004047 nil]
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(416@339) mouseUp 8004047 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(416@339) mouseUp 8004047 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(416@339) mouseDown red 8003997 nil]
		firstClickUp: 	[(416@339) mouseUp 8004047 nil]
		firstClickTime: 	8003997
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8004018


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(416@339) mouseUp 8004047 nil]
		evt: 	[(416@339) mouseUp 8004047 nil]
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(416@339) mouseUp 8004047 nil]
		evtBuf: 	#(1 8004047 416 339 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(416@339) corner: (432@355)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(416@339) mouseUp 8004047 nil]
		targetOffset: 	(93.0@99.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8004047 416 339 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8004039
		lastStepMessage: 	nil
		lastCycleTime: 	8004060
		alarms: 	a Heap()
		lastAlarmTime: 	8004039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8004039
		lastStepMessage: 	nil
		lastCycleTime: 	8004060
		alarms: 	a Heap()
		lastAlarmTime: 	8004039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8004039
		lastStepMessage: 	nil
		lastCycleTime: 	8004060
		alarms: 	a Heap()
		lastAlarmTime: 	8004039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8004039
		lastStepMessage: 	nil
		lastCycleTime: 	8004060
		alarms: 	a Heap()
		lastAlarmTime: 	8004039
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:30:21.917226 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(401@338) mouseUp 8007044 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(401@338) mouseUp 8007044 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(QualityAssistant)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(401@338) mouseUp 8007044 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8007044
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(401@338)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(401@338) mouseOver red 8006996 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		evt: 	[(401@338) mouseUp 8007044 nil]
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(401@338) mouseUp 8007044 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(401@338) mouseUp 8007044 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(401@338) mouseDown red 8006996 nil]
		firstClickUp: 	[(401@338) mouseUp 8007044 nil]
		firstClickTime: 	8006996
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8007017


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(401@338) mouseUp 8007044 nil]
		evt: 	[(401@338) mouseUp 8007044 nil]
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(401@338) mouseUp 8007044 nil]
		evtBuf: 	#(1 8007044 401 338 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(401@338) corner: (417@354)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(401@338) corner: (417@354)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(401@338) mouseUp 8007044 nil]
		targetOffset: 	(78.0@98.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8007044 401 338 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8007040
		lastStepMessage: 	nil
		lastCycleTime: 	8007060
		alarms: 	a Heap()
		lastAlarmTime: 	8007040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8007040
		lastStepMessage: 	nil
		lastCycleTime: 	8007060
		alarms: 	a Heap()
		lastAlarmTime: 	8007040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8007040
		lastStepMessage: 	nil
		lastCycleTime: 	8007060
		alarms: 	a Heap()
		lastAlarmTime: 	8007040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8007040
		lastStepMessage: 	nil
		lastCycleTime: 	8007060
		alarms: 	a Heap()
		lastAlarmTime: 	8007040
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:30:24.448165 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(377@326) mouseUp 8009589 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(377@326) mouseUp 8009589 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(377@326) mouseUp 8009589 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8009589
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(377@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(377@326) mouseOver red 8009520 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		evt: 	[(377@326) mouseUp 8009589 nil]
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(377@326) mouseUp 8009589 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(377@326) mouseUp 8009589 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(377@326) mouseDown red 8009520 nil]
		firstClickUp: 	[(377@326) mouseUp 8009589 nil]
		firstClickTime: 	8009520
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8009526


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(377@326) mouseUp 8009589 nil]
		evt: 	[(377@326) mouseUp 8009589 nil]
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(377@326) mouseUp 8009589 nil]
		evtBuf: 	#(1 8009589 377 326 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(377@326) corner: (393@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(377@326) corner: (393@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@326) mouseUp 8009589 nil]
		targetOffset: 	(54.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8009589 377 326 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8009568
		lastStepMessage: 	nil
		lastCycleTime: 	8009589
		alarms: 	a Heap()
		lastAlarmTime: 	8009568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8009568
		lastStepMessage: 	nil
		lastCycleTime: 	8009589
		alarms: 	a Heap()
		lastAlarmTime: 	8009568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8009568
		lastStepMessage: 	nil
		lastCycleTime: 	8009589
		alarms: 	a Heap()
		lastAlarmTime: 	8009568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8009568
		lastStepMessage: 	nil
		lastCycleTime: 	8009589
		alarms: 	a Heap()
		lastAlarmTime: 	8009568
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:30:36.418899 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(385@322) mouseUp 8021557 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(385@322) mouseUp 8021557 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(385@322) mouseUp 8021557 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8021557
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(385@322)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(385@322) mouseOver red 8021476 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		evt: 	[(385@322) mouseUp 8021557 nil]
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(385@322) mouseUp 8021557 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(385@322) mouseUp 8021557 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(385@322) mouseDown red 8021476 nil]
		firstClickUp: 	[(385@322) mouseUp 8021557 nil]
		firstClickTime: 	8021476
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8021495


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(385@322) mouseUp 8021557 nil]
		evt: 	[(385@322) mouseUp 8021557 nil]
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(385@322) mouseUp 8021557 nil]
		evtBuf: 	#(1 8021557 385 322 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(385@322) corner: (401@338)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(385@322) corner: (401@338)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(385@322) mouseUp 8021557 nil]
		targetOffset: 	(62.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8021557 385 322 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8021540
		lastStepMessage: 	nil
		lastCycleTime: 	8021561
		alarms: 	a Heap()
		lastAlarmTime: 	8021540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8021540
		lastStepMessage: 	nil
		lastCycleTime: 	8021561
		alarms: 	a Heap()
		lastAlarmTime: 	8021540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8021540
		lastStepMessage: 	nil
		lastCycleTime: 	8021561
		alarms: 	a Heap()
		lastAlarmTime: 	8021540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8021540
		lastStepMessage: 	nil
		lastCycleTime: 	8021561
		alarms: 	a Heap()
		lastAlarmTime: 	8021540
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:30:39.844478 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(402@326) mouseUp 8024970 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(402@326) mouseUp 8024970 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(402@326) mouseUp 8024970 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8024970
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(402@326)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(402@326) mouseOver red 8024888 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		evt: 	[(402@326) mouseUp 8024970 nil]
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(402@326) mouseUp 8024970 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(402@326) mouseUp 8024970 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(402@326) mouseDown red 8024888 nil]
		firstClickUp: 	[(402@326) mouseUp 8024970 nil]
		firstClickTime: 	8024888
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8024900


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(402@326) mouseUp 8024970 nil]
		evt: 	[(402@326) mouseUp 8024970 nil]
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(402@326) mouseUp 8024970 nil]
		evtBuf: 	#(1 8024970 402 326 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(402@326) corner: (418@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(402@326) corner: (418@342)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(402@326) mouseUp 8024970 nil]
		targetOffset: 	(79.0@86.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8024970 402 326 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8024965
		lastStepMessage: 	nil
		lastCycleTime: 	8024988
		alarms: 	a Heap()
		lastAlarmTime: 	8024965
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8024965
		lastStepMessage: 	nil
		lastCycleTime: 	8024988
		alarms: 	a Heap()
		lastAlarmTime: 	8024965
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8024965
		lastStepMessage: 	nil
		lastCycleTime: 	8024988
		alarms: 	a Heap()
		lastAlarmTime: 	8024965
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8024965
		lastStepMessage: 	nil
		lastCycleTime: 	8024988
		alarms: 	a Heap()
		lastAlarmTime: 	8024965
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:31:57.860111 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(380@329) mouseUp 8102994 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(ProvesCAP2022))))
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(380@329) mouseUp 8102994 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(380@329) mouseUp 8102994 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8102994
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(380@329)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(380@329) mouseOver red 8102935 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		evt: 	[(380@329) mouseUp 8102994 nil]
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(380@329) mouseUp 8102994 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(380@329) mouseUp 8102994 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(380@329) mouseDown red 8102935 nil]
		firstClickUp: 	[(380@329) mouseUp 8102994 nil]
		firstClickTime: 	8102935
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8102938


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(380@329) mouseUp 8102994 nil]
		evt: 	[(380@329) mouseUp 8102994 nil]
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(380@329) mouseUp 8102994 nil]
		evtBuf: 	#(1 8102994 380 329 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(380@329) corner: (396@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@329) mouseUp 8102994 nil]
		targetOffset: 	(57.0@89.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8102994 380 329 0 0 0 1)
		lastKeyScanCode: 	48
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(660634624))(a FadingMorp...etc...
		lastStepTime: 	8102982
		lastStepMessage: 	nil
		lastCycleTime: 	8103003
		alarms: 	a Heap()
		lastAlarmTime: 	8102982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(660634624))(a FadingMorp...etc...
		lastStepTime: 	8102982
		lastStepMessage: 	nil
		lastCycleTime: 	8103003
		alarms: 	a Heap()
		lastAlarmTime: 	8102982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(660634624))(a FadingMorp...etc...
		lastStepTime: 	8102982
		lastStepMessage: 	nil
		lastCycleTime: 	8103003
		alarms: 	a Heap()
		lastAlarmTime: 	8102982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a FadingMorph(660634624))(a FadingMorp...etc...
		lastStepTime: 	8102982
		lastStepMessage: 	nil
		lastCycleTime: 	8103003
		alarms: 	a Heap()
		lastAlarmTime: 	8102982
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#theNonMetaClass was sent to nil
12 November 2022 1:37:54.398573 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #theNonMetaClass
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	theNonMetaClass
		exception: 	MessageNotUnderstood: receiver of "theNonMetaClass" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClassWidget>>selectClass:
	Receiver: a ClassWidget
	Arguments and temporary variables: 
		aClass: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a FTPluggableIconListMorphAdaptor(209017856))
		announceur: 	nil
		model: 	a NautilusUI
		classesList: 	a FTPluggableIconListMorphAdaptor(209017856)
		classesSelection: 	a Dictionary()
		classesListElements: 	an OrderedCollection(BaselineOfBasicTools BaselineOfDispla...etc...
		cachedHierarchy: 	a SortHierarchically
		showHierarchy: 	false


NautilusUI>>selectedClassWithoutChangingSelectionInternally:
	Receiver: a NautilusUI
	Arguments and temporary variables: 
		aClass: 	nil
		package: 	a PackageTreeGroupSelection
		packageChanged: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(457766912)
		sourceCodePanel: 	a PanelMorph(535857664)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(687618560)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(998451200)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(350728192)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(352832512)


NautilusHistoryEntry>>applyTo:
	Receiver: a NautilusHistoryEntry
	Arguments and temporary variables: 
		aNautilus: 	a Nautilus
		interface: 	a NautilusUI
	Receiver's instance variables: 
		selectedPackage: 	a PackageTreeGroupSelection
		selectedCategory: 	nil
		selectedSelector: 	nil
		selectedClass: 	nil
		selectedGroup: 	a PackageGroup ( Configurations )
		showHierarchy: 	false
		sortHierarchically: 	true
		showComment: 	false
		showInstance: 	true
		showCategories: 	true


[ anAssociation key applyTo: self ] in Nautilus>>adopt:
	Receiver: a Nautilus
	Arguments and temporary variables: 
		anAssociation: 	a NautilusHistoryEntry->2022-11-12T12:25:44.668848+01:00
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection(a QANautilusPlugin)
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	a PackageGroup ( Configurations )
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreeGroupSelection
		showCategories: 	true
		showComment: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a NautilusUI
		methodClassifier: 	nil


BlockClosure>>ensure:
	Receiver: [ anAssociation key applyTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ paused := previousPausedValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Nautilus>>adopt:
		startpc: 	36
		numArgs: 	0


NavigationHistory>>pauseDuring:
	Receiver: a NavigationHistory
	Arguments and temporary variables: 
		aBlock: 	[ anAssociation key applyTo: self ]
		previousPausedValue: 	true
	Receiver's instance variables: 
		storage: 	an OrderedCollection(a NautilusHistoryEntry->2022-11-12T12:02:49.27973...etc...
		index: 	4
		maxSize: 	15
		paused: 	true


Nautilus>>adopt:
	Receiver: a Nautilus
	Arguments and temporary variables: 
		anAssociation: 	a NautilusHistoryEntry->2022-11-12T12:25:44.668848+01:00
	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection(a QANautilusPlugin)
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	a PackageGroup ( Configurations )
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreeGroupSelection
		showCategories: 	true
		showComment: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a NautilusUI
		methodClassifier: 	nil


[ self adopt: self browsingHistory next.
self historyChanged ] in Nautilus>>next
	Receiver: a Nautilus
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection(a QANautilusPlugin)
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	a PackageGroup ( Configurations )
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreeGroupSelection
		showCategories: 	true
		showComment: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a NautilusUI
		methodClassifier: 	nil


BlockClosure>>ensure:
	Receiver: [ self adopt: self browsingHistory next.
self historyChanged ]
	Arguments and temporary variables: 
		aBlock: 	[ paused := previousPausedValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Nautilus>>next
		startpc: 	35
		numArgs: 	0


NavigationHistory>>pauseDuring:
	Receiver: a NavigationHistory
	Arguments and temporary variables: 
		aBlock: 	[ self adopt: self browsingHistory next.
self historyChanged ]
		previousPausedValue: 	false
	Receiver's instance variables: 
		storage: 	an OrderedCollection(a NautilusHistoryEntry->2022-11-12T12:02:49.27973...etc...
		index: 	4
		maxSize: 	15
		paused: 	true


Nautilus>>next
	Receiver: a Nautilus
	Arguments and temporary variables: 

	Receiver's instance variables: 
		announcer: 	an Announcer
		browsedEnvironment: 	Smalltalk
		browsingHistory: 	a NavigationHistory
		plugins: 	an OrderedCollection(a QANautilusPlugin)
		selectedCategory: 	nil
		selectedClass: 	nil
		selectedGroup: 	a PackageGroup ( Configurations )
		selectedMethod: 	nil
		selectedPackage: 	a PackageTreeGroupSelection
		showCategories: 	true
		showComment: 	false
		sortHierarchically: 	true
		showInstance: 	false
		showHierarchy: 	false
		ui: 	a NautilusUI
		methodClassifier: 	nil


NautilusUI>>next
	Receiver: a NautilusUI
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a CategoryWidget a MethodWidget a ClassWidget a P...etc...
		announceur: 	nil
		model: 	a Nautilus
		window: 	a NautilusWindow(457766912)
		sourceCodePanel: 	a PanelMorph(535857664)
		fullDisplayedComment: 	false
		sourceCodeContainer: 	a PanelMorph(687618560)
		shouldUpdateTitle: 	true
		contentSelection: 	a Text for ''
		acceptor: 	a ClassOrMethodDefinitionAcceptor
		commentWidget: 	nil
		sourceTextWidget: 	a RubScrolledTextMorph(998451200)
		sourceCodeSelectionInterval: 	(1 to: 0)
		sourceTextModel: 	a RubScrolledTextModel
		methodClassifier: 	nil
		commentTextModel: 	a RubScrolledTextModel
		instanceButtonWidget: 	a PluggableToggleButtonMorph(350728192)
		categoryWidget: 	a CategoryWidget
		methodWidget: 	a MethodWidget
		classWidget: 	a ClassWidget
		packageWidget: 	a PackageWidget
		packagePatternString: 	''
		packagePattern: 	nil
		searchWidget: 	a SearchMorph(352832512)


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 
		evt: 	[(1155@199) mouseUp 8459519 nil]
	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1155@199) mouseUp 8459519 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(153782784)
	Receiver's instance variables: 
		timeStamp: 	8459519
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1155@199)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


IconicButton(Morph)>>handleEvent:
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleFocusEvent:
	Receiver: an IconicButton(153782784)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
	Receiver's instance variables: 
		bounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		owner: 	a PanelMorph(1018673152)
		submorphs: 	an Array(an ImageMorph(470321664))
		fullBounds: 	(1143.0@182.0) corner: (1164.0@209.0)
		color: 	Color transparent
		extension: 	a MorphExtension (883177984) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	a NautilusUI
		actionSelector: 	#next
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(470321664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
		focusHolder: 	an IconicButton(153782784)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(1155@199) mouseOver red 8459452 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
		focusHolder: 	an IconicButton(153782784)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
		focusHolder: 	an IconicButton(153782784)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1155@199) mouseUp 8459519 nil]
		evt: 	[(1155@199) mouseUp 8459519 nil]
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(1155@199) mouseUp 8459519 nil]
		evtBuf: 	#(1 8459519 1155 199 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1155@199) corner: (1171@215)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1155@199) corner: (1171@215)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1155@199) mouseUp 8459519 nil]
		targetOffset: 	(12.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8459519 1155 199 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8459500
		lastStepMessage: 	nil
		lastCycleTime: 	8459521
		alarms: 	a Heap()
		lastAlarmTime: 	8459500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8459500
		lastStepMessage: 	nil
		lastCycleTime: 	8459521
		alarms: 	a Heap()
		lastAlarmTime: 	8459500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8459500
		lastStepMessage: 	nil
		lastCycleTime: 	8459521
		alarms: 	a Heap()
		lastAlarmTime: 	8459500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8459500
		lastStepMessage: 	nil
		lastCycleTime: 	8459521
		alarms: 	a Heap()
		lastAlarmTime: 	8459500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #theNonMetaClass
ClassWidget>>selectClass:
NautilusUI>>selectedClassWithoutChangingSelectionInternally:
NautilusHistoryEntry>>applyTo:
[ anAssociation key applyTo: self ] in Nautilus>>adopt:
BlockClosure>>ensure:
NavigationHistory>>pauseDuring:
Nautilus>>adopt:
[ self adopt: self browsingHistory next.
self historyChanged ] in Nautilus>>next
BlockClosure>>ensure:
NavigationHistory>>pauseDuring:
Nautilus>>next
NautilusUI>>next
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:05.488611 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(390@298) mouseUp 8470624 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(390@298) mouseUp 8470624 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(390@298) mouseUp 8470624 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8470624
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(390@298)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(390@298) mouseOver red 8470582 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		evt: 	[(390@298) mouseUp 8470624 nil]
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(390@298) mouseUp 8470624 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(390@298) mouseUp 8470624 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(390@298) mouseDown red 8470582 nil]
		firstClickUp: 	[(390@298) mouseUp 8470624 nil]
		firstClickTime: 	8470582
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8470588


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@298) mouseUp 8470624 nil]
		evt: 	[(390@298) mouseUp 8470624 nil]
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(390@298) mouseUp 8470624 nil]
		evtBuf: 	#(1 8470624 390 298 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(390@298) corner: (406@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@298) mouseUp 8470624 nil]
		targetOffset: 	(67.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8470624 390 298 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8470609
		lastStepMessage: 	nil
		lastCycleTime: 	8470630
		alarms: 	a Heap()
		lastAlarmTime: 	8470609
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8470609
		lastStepMessage: 	nil
		lastCycleTime: 	8470630
		alarms: 	a Heap()
		lastAlarmTime: 	8470609
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8470609
		lastStepMessage: 	nil
		lastCycleTime: 	8470630
		alarms: 	a Heap()
		lastAlarmTime: 	8470609
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8470609
		lastStepMessage: 	nil
		lastCycleTime: 	8470630
		alarms: 	a Heap()
		lastAlarmTime: 	8470609
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:08.257277 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>setSelectedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	an OrderedCollection(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>yellowButtonEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		sel: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph>>mouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(392@298) mouseDown yellow 8473392 nil]
		targetMorph: 	nil
		selectors: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(392@298) mouseDown yellow 8473392 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8473392
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(392@298)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a MorphTreeMorph(779534336)
		globalPt: 	(392@298)
		localEvt: 	[(392@298) mouseDown yellow 8473392 nil]
		index: 	5
		child: 	a MorphTreeTransformMorph(572103680)
		morphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625100...etc...
		handler: 	a MorphTreeMorph(779534336)
		inside: 	false
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(392@298) mouseDown yellow 8473392 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8473392
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(392@298)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


MorphTreeMorph(Morph)>>processEvent:using:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a PanelMorph(913355264)
		globalPt: 	(392@298)
		localEvt: 	[(392@298) mouseDown yellow 8473392 nil]
		index: 	1
		child: 	a MorphTreeMorph(779534336)
		morphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(392@298) mouseDown yellow 8473392 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8473392
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(392@298)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


PanelMorph(Morph)>>processEvent:using:
	Receiver: a PanelMorph(913355264)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@213.0) corner: (506.0@460.0)
		owner: 	a NautilusWindow(457766912)
		submorphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		fullBounds: 	(323@213) corner: (506@460)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (96053248) [sticky]  [other:  (kmDispatcher -> a KM...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a NautilusWindow(457766912)
		globalPt: 	(392@298)
		localEvt: 	[(392@298) mouseDown yellow 8473392 nil]
		index: 	11
		child: 	a PanelMorph(913355264)
		morphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014510...etc...
		handler: 	a NautilusWindow(457766912)
		inside: 	nil
		lastHandler: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(392@298) mouseDown yellow 8473392 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8473392
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(392@298)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


NautilusWindow(Morph)>>processEvent:using:
	Receiver: a NautilusWindow(457766912)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(318.0@154.0) corner: (1168.0@774.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014...etc...
		fullBounds: 	(318@154) corner: (1168@774)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (524990976) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a NautilusUI
		labelString: 	'OrderedCollection class'
		stripes: 	an Array(a Morph(590530560) a Morph(451980288))
		label: 	a LabelMorph(26819584)'OrderedCollection class'
		closeBox: 	a MultistateButtonMorph(540333056)
		collapseBox: 	a MultistateButtonMorph(861301248)
		paneMorphs: 	an Array(a QANautilusPluginMorph(512055808) a PanelMorph(687618560)...etc...
		collapsedFrame: 	nil
		fullFrame: 	(318.0@154.0) corner: (1168.0@774.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(74968576)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(743604224)
		expandBox: 	a MultistateButtonMorph(786802176)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a WorldMorph(562956288) [world]
		globalPt: 	(392@298)
		localEvt: 	[(392@298) mouseDown yellow 8473392 nil]
		index: 	2
		child: 	a NautilusWindow(457766912)
		morphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a SpecWi...etc...
		handler: 	a WorldMorph(562956288) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(392@298) mouseDown yellow 8473392 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8473392
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(392@298)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(392@298) corner: (408@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(392@298) corner: (408@314)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	a MorphTreeMorph(779534336)
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		targetOffset: 	(69.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8473392 392 298 2 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(392@298) mouseDown yellow 8473392 nil]
	Receiver's instance variables: 
		bounds: 	(392@298) corner: (408@314)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(392@298) corner: (408@314)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	a MorphTreeMorph(779534336)
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(392@298) mouseDown yellow 8473392 nil]
		targetOffset: 	(69.0@58.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8473392 392 298 2 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>setSelectedMorph:
MorphTreeMorph>>yellowButtonEvent:
MorphTreeMorph>>mouseDown:
MorphTreeMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MorphTreeMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:12.029014 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(406@294) mouseUp 8477154 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(406@294) mouseUp 8477154 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(406@294) mouseUp 8477154 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8477154
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(406@294)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(406@294) mouseOver red 8476684 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(406@294) mouseUp 8477154 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(406@294) mouseUp 8477154 nil]
		evt: 	[(406@294) mouseUp 8477154 nil]
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(406@294) mouseUp 8477154 nil]
		evtBuf: 	#(1 8477154 406 294 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(406@294) corner: (422@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(406@294) corner: (422@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(406@294) mouseUp 8477154 nil]
		targetOffset: 	(83.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8477154 406 294 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8477150
		lastStepMessage: 	nil
		lastCycleTime: 	8477171
		alarms: 	a Heap()
		lastAlarmTime: 	8477150
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8477150
		lastStepMessage: 	nil
		lastCycleTime: 	8477171
		alarms: 	a Heap()
		lastAlarmTime: 	8477150
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8477150
		lastStepMessage: 	nil
		lastCycleTime: 	8477171
		alarms: 	a Heap()
		lastAlarmTime: 	8477150
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8477150
		lastStepMessage: 	nil
		lastCycleTime: 	8477171
		alarms: 	a Heap()
		lastAlarmTime: 	8477150
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:21.52475 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(390@293) mouseUp 8486659 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8486659
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(390@293)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(390@293) mouseOver red 8486599 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(390@293) mouseUp 8486659 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(390@293) mouseUp 8486659 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(390@293) mouseDown red 8486599 nil]
		firstClickUp: 	[(390@293) mouseUp 8486659 nil]
		firstClickTime: 	8486599
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8486603


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(390@293) mouseUp 8486659 nil]
		evtBuf: 	#(1 8486659 390 293 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(390@293) corner: (406@309)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(390@293) corner: (406@309)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(390@293) mouseUp 8486659 nil]
		targetOffset: 	(67.0@53.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8486659 390 293 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8486645
		lastStepMessage: 	nil
		lastCycleTime: 	8486667
		alarms: 	a Heap()
		lastAlarmTime: 	8486645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8486645
		lastStepMessage: 	nil
		lastCycleTime: 	8486667
		alarms: 	a Heap()
		lastAlarmTime: 	8486645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8486645
		lastStepMessage: 	nil
		lastCycleTime: 	8486667
		alarms: 	a Heap()
		lastAlarmTime: 	8486645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8486645
		lastStepMessage: 	nil
		lastCycleTime: 	8486667
		alarms: 	a Heap()
		lastAlarmTime: 	8486645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:24.765548 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(390@293) mouseUp 8486659 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8486659
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(390@293)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(390@293) mouseOver red 8486599 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#secondClickDown]
	Arguments and temporary variables: 
		evt: 	[(390@293) mouseUp 8486659 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(390@293) mouseUp 8486659 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#secondClickDown
		firstClickDown: 	[(390@293) mouseDown red 8486599 nil]
		firstClickUp: 	[(390@293) mouseUp 8486659 nil]
		firstClickTime: 	8486599
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8486603


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(390@293) mouseUp 8486659 nil]
		evtBuf: 	#(1 8486659 390 293 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(429@214) corner: (445@230)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(429@214) corner: (445@230)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(546377216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(429@214) mouseUp 8489889 nil]
		targetOffset: 	(86.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8489889 429 214 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8489885
		lastStepMessage: 	nil
		lastCycleTime: 	8489905
		alarms: 	a Heap()
		lastAlarmTime: 	8489885
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8489885
		lastStepMessage: 	nil
		lastCycleTime: 	8489905
		alarms: 	a Heap()
		lastAlarmTime: 	8489885
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8489885
		lastStepMessage: 	nil
		lastCycleTime: 	8489905
		alarms: 	a Heap()
		lastAlarmTime: 	8489885
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8489885
		lastStepMessage: 	nil
		lastCycleTime: 	8489905
		alarms: 	a Heap()
		lastAlarmTime: 	8489885
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:25.959921 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(390@293) mouseUp 8486659 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8486659
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(390@293)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(390@293) mouseOver red 8486599 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#secondClickDown]
	Arguments and temporary variables: 
		evt: 	[(390@293) mouseUp 8486659 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(390@293) mouseUp 8486659 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#secondClickDown
		firstClickDown: 	[(390@293) mouseDown red 8486599 nil]
		firstClickUp: 	[(390@293) mouseUp 8486659 nil]
		firstClickTime: 	8486599
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8486603


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(390@293) mouseUp 8486659 nil]
		evtBuf: 	#(1 8486659 390 293 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(443@239) corner: (459@255)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(443@239) corner: (459@255)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(698118144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(443@239) mouseUp 8491080 nil]
		targetOffset: 	(80.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8491080 443 239 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8491078
		lastStepMessage: 	nil
		lastCycleTime: 	8491099
		alarms: 	a Heap()
		lastAlarmTime: 	8491078
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8491078
		lastStepMessage: 	nil
		lastCycleTime: 	8491099
		alarms: 	a Heap()
		lastAlarmTime: 	8491078
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8491078
		lastStepMessage: 	nil
		lastCycleTime: 	8491099
		alarms: 	a Heap()
		lastAlarmTime: 	8491078
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8491078
		lastStepMessage: 	nil
		lastCycleTime: 	8491099
		alarms: 	a Heap()
		lastAlarmTime: 	8491078
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:26.943958 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: lastClicked: false
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#lastClicked:
		args: 	#(false)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(390@293) mouseUp 8486659 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(390@293) mouseUp 8486659 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8486659
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(390@293)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(390@293) mouseOver red 8486599 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#secondClickDown]
	Arguments and temporary variables: 
		evt: 	[(390@293) mouseUp 8486659 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(390@293) mouseUp 8486659 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#secondClickDown
		firstClickDown: 	[(390@293) mouseDown red 8486599 nil]
		firstClickUp: 	[(390@293) mouseUp 8486659 nil]
		firstClickTime: 	8486599
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8486603


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(390@293) mouseUp 8486659 nil]
		evt: 	[(390@293) mouseUp 8486659 nil]
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(390@293) mouseUp 8486659 nil]
		evtBuf: 	#(1 8486659 390 293 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(479@264) corner: (495@280)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(479@264) corner: (495@280)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(777965056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(479@264) mouseUp 8492076 nil]
		targetOffset: 	(96.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8492076 479 264 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8492063
		lastStepMessage: 	nil
		lastCycleTime: 	8492084
		alarms: 	a Heap()
		lastAlarmTime: 	8492063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8492063
		lastStepMessage: 	nil
		lastCycleTime: 	8492084
		alarms: 	a Heap()
		lastAlarmTime: 	8492063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8492063
		lastStepMessage: 	nil
		lastCycleTime: 	8492084
		alarms: 	a Heap()
		lastAlarmTime: 	8492063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8492063
		lastStepMessage: 	nil
		lastCycleTime: 	8492084
		alarms: 	a Heap()
		lastAlarmTime: 	8492063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:38:42.017243 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>setSelectedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	an OrderedCollection(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>yellowButtonEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		sel: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph>>mouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(376@301) mouseDown yellow 8507152 nil]
		targetMorph: 	nil
		selectors: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(376@301) mouseDown yellow 8507152 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8507152
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(376@301)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a MorphTreeMorph(779534336)
		globalPt: 	(376@301)
		localEvt: 	[(376@301) mouseDown yellow 8507152 nil]
		index: 	5
		child: 	a MorphTreeTransformMorph(572103680)
		morphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625100...etc...
		handler: 	a MorphTreeMorph(779534336)
		inside: 	false
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(376@301) mouseDown yellow 8507152 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8507152
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(376@301)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


MorphTreeMorph(Morph)>>processEvent:using:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a PanelMorph(913355264)
		globalPt: 	(376@301)
		localEvt: 	[(376@301) mouseDown yellow 8507152 nil]
		index: 	1
		child: 	a MorphTreeMorph(779534336)
		morphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(376@301) mouseDown yellow 8507152 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8507152
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(376@301)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


PanelMorph(Morph)>>processEvent:using:
	Receiver: a PanelMorph(913355264)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@213.0) corner: (506.0@460.0)
		owner: 	a NautilusWindow(457766912)
		submorphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		fullBounds: 	(323@213) corner: (506@460)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (96053248) [sticky]  [other:  (kmDispatcher -> a KM...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a NautilusWindow(457766912)
		globalPt: 	(376@301)
		localEvt: 	[(376@301) mouseDown yellow 8507152 nil]
		index: 	11
		child: 	a PanelMorph(913355264)
		morphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014510...etc...
		handler: 	a NautilusWindow(457766912)
		inside: 	nil
		lastHandler: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(376@301) mouseDown yellow 8507152 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8507152
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(376@301)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


NautilusWindow(Morph)>>processEvent:using:
	Receiver: a NautilusWindow(457766912)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(318.0@154.0) corner: (1168.0@774.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014...etc...
		fullBounds: 	(318@154) corner: (1168@774)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (524990976) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a NautilusUI
		labelString: 	'OrderedCollection class'
		stripes: 	an Array(a Morph(590530560) a Morph(451980288))
		label: 	a LabelMorph(26819584)'OrderedCollection class'
		closeBox: 	a MultistateButtonMorph(540333056)
		collapseBox: 	a MultistateButtonMorph(861301248)
		paneMorphs: 	an Array(a QANautilusPluginMorph(512055808) a PanelMorph(687618560)...etc...
		collapsedFrame: 	nil
		fullFrame: 	(318.0@154.0) corner: (1168.0@774.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(74968576)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(743604224)
		expandBox: 	a MultistateButtonMorph(786802176)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a WorldMorph(562956288) [world]
		globalPt: 	(376@301)
		localEvt: 	[(376@301) mouseDown yellow 8507152 nil]
		index: 	2
		child: 	a NautilusWindow(457766912)
		morphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a SpecWi...etc...
		handler: 	a WorldMorph(562956288) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(376@301) mouseDown yellow 8507152 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8507152
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(376@301)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(376@301) corner: (392@317)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(376@301) corner: (392@317)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	a MorphTreeMorph(779534336)
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		targetOffset: 	(53.0@61.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8507152 376 301 2 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(376@301) mouseDown yellow 8507152 nil]
	Receiver's instance variables: 
		bounds: 	(376@301) corner: (392@317)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(376@301) corner: (392@317)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	a MorphTreeMorph(779534336)
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(376@301) mouseDown yellow 8507152 nil]
		targetOffset: 	(53.0@61.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8507152 376 301 2 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>setSelectedMorph:
MorphTreeMorph>>yellowButtonEvent:
MorphTreeMorph>>mouseDown:
MorphTreeMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MorphTreeMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:39:24.624257 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(373@296) mouseUp 8549746 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(373@296) mouseUp 8549746 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(373@296) mouseUp 8549746 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8549746
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(373@296)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(373@296) mouseOver red 8549671 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		evt: 	[(373@296) mouseUp 8549746 nil]
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(373@296) mouseUp 8549746 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(373@296) mouseUp 8549746 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(373@296) mouseDown red 8549671 nil]
		firstClickUp: 	[(373@296) mouseUp 8549746 nil]
		firstClickTime: 	8549671
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8549683


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(373@296) mouseUp 8549746 nil]
		evt: 	[(373@296) mouseUp 8549746 nil]
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(373@296) mouseUp 8549746 nil]
		evtBuf: 	#(1 8549746 373 296 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(373@296) corner: (389@312)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(373@296) mouseUp 8549746 nil]
		targetOffset: 	(50.0@56.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8549746 373 296 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8549746
		lastStepMessage: 	nil
		lastCycleTime: 	8549767
		alarms: 	a Heap()
		lastAlarmTime: 	8549746
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8549746
		lastStepMessage: 	nil
		lastCycleTime: 	8549767
		alarms: 	a Heap()
		lastAlarmTime: 	8549746
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8549746
		lastStepMessage: 	nil
		lastCycleTime: 	8549767
		alarms: 	a Heap()
		lastAlarmTime: 	8549746
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(985937920))(a DropList...etc...
		lastStepTime: 	8549746
		lastStepMessage: 	nil
		lastCycleTime: 	8549767
		alarms: 	a Heap()
		lastAlarmTime: 	8549746
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#lastClicked: was sent to nil
12 November 2022 1:39:27.41171 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	lastClicked: false
		exception: 	MessageNotUnderstood: receiver of "lastClicked:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		withMultipleSelection: 	false
		checkBox: 	false
		path: 	nil
		mult: 	nil
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>mouseUp:on:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		event: 	[(437@288) mouseUp 8552544 nil]
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	nil
		cmdOrCtrl: 	false
		clickedTheCheckbox: 	false
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>mouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(437@288) mouseUp 8552544 nil]
		nodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		wasHigh: 	true
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseUp:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(437@288) mouseUp 8552544 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8552544
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(437@288)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleFocusEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	false
		maxNodeWidth: 	273.0
		enabled: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	[(437@288) mouseOver red 8552475 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		focusHolder: 	a MorphTreeMorph(779534336)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		evt: 	[(437@288) mouseUp 8552544 nil]
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(437@288) mouseUp 8552544 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(437@288) mouseUp 8552544 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a MorphTreeMorph(779534336)
		clickState: 	#firstClickUp
		firstClickDown: 	[(437@288) mouseDown red 8552475 nil]
		firstClickUp: 	[(437@288) mouseUp 8552544 nil]
		firstClickTime: 	8552475
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	nil
		dragSelector: 	nil
		dragThreshold: 	10
		localStamp: 	8552488


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(437@288) mouseUp 8552544 nil]
		evt: 	[(437@288) mouseUp 8552544 nil]
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(437@288) mouseUp 8552544 nil]
		evtBuf: 	#(1 8552544 437 288 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(437@288) corner: (453@304)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(437@288) corner: (453@304)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	nil
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(437@288) mouseUp 8552544 nil]
		targetOffset: 	(114.0@48.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8552544 437 288 0 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8552530
		lastStepMessage: 	nil
		lastCycleTime: 	8552552
		alarms: 	a Heap()
		lastAlarmTime: 	8552530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8552530
		lastStepMessage: 	nil
		lastCycleTime: 	8552552
		alarms: 	a Heap()
		lastAlarmTime: 	8552530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8552530
		lastStepMessage: 	nil
		lastCycleTime: 	8552552
		alarms: 	a Heap()
		lastAlarmTime: 	8552530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(352832512))(a SearchMorp...etc...
		lastStepTime: 	8552530
		lastStepMessage: 	nil
		lastCycleTime: 	8552552
		alarms: 	a Heap()
		lastAlarmTime: 	8552530
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>selectMorph:multiple:clickedTheCheckBox:
MorphTreeListManager>>mouseUp:on:
MorphTreeMorph>>mouseUp:
MorphTreeMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphTreeMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldBeImplemented: #lastClicked: should have been implemented in UndefinedObject
12 November 2022 1:39:59.763691 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>shouldBeImplemented
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>lastClicked:
	Receiver: nil
	Arguments and temporary variables: 
		aFalse: 	false
	Receiver's instance variables: 
nil

MorphTreeListManager>>lastClickedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aNodeMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeListManager>>setSelectedMorph:
	Receiver: a MorphTreeListManager
	Arguments and temporary variables: 
		aMorph: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
		path: 	an OrderedCollection(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		keystrokeActionSelector: 	nil
		multipleSelection: 	true
		autoMultiSelection: 	false
		potentialDropMorph: 	nil
		firstClickedMorph: 	NodeMorph(nil)
		lastClickedMorph: 	NodeMorph(nil)
		columnDropUnabled: 	nil
		autoDeselection: 	false
		searchedElement: 	nil
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		lastSelection: 	0
		client: 	a MorphTreeMorph(779534336)
		isSelectionUpdateFromView: 	false
		isCheckList: 	false
		autoTargetMorph: 	nil
		selectedMorphList: 	a LinkedList(NodeMorph(Node(a RPackage(Collections-Sequencea...etc...
		removeOnlyLastSelected: 	false
		doubleClickSelector: 	#doubleClickEvent:onNodeMorph:


MorphTreeMorph>>yellowButtonEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		sel: 	NodeMorph(Node(a RPackage(ProvesCAP2022)))
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph>>mouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		event: 	[(381@294) mouseDown yellow 8584894 nil]
		targetMorph: 	nil
		selectors: 	nil
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphTreeMorph(Morph)>>handleMouseDown:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(381@294) mouseDown yellow 8584894 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		timeStamp: 	8584894
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(381@294)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


MorphTreeMorph(Morph)>>handleEvent:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a MorphTreeMorph(779534336)
		globalPt: 	(381@294)
		localEvt: 	[(381@294) mouseDown yellow 8584894 nil]
		index: 	5
		child: 	a MorphTreeTransformMorph(572103680)
		morphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625100...etc...
		handler: 	a MorphTreeMorph(779534336)
		inside: 	false
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(381@294) mouseDown yellow 8584894 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8584894
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(381@294)
		handler: 	a MorphTreeMorph(779534336)
		wasHandled: 	true
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a MorphTreeMorph(779534336)
	Receiver's instance variables: 
		morph: 	nil


MorphTreeMorph(Morph)>>processEvent:using:
	Receiver: a MorphTreeMorph(779534336)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@240.0) corner: (506.0@460.0)
		owner: 	a PanelMorph(913355264)
		submorphs: 	an Array(a ScrollBar(946520064) a ScrollBar(808826368) a Morph(20625...etc...
		fullBounds: 	(323@240) corner: (506@460)
		color: 	Color white
		extension: 	a MorphExtension (425848320) [other:  (announcer -> an Announcer) (d...etc...
		borderWidth: 	0
		borderColor: 	Color gray
		model: 	a PackageTreeModel
		scrollBar: 	a ScrollBar(808826368)
		scroller: 	a MorphTreeTransformMorph(572103680)
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(946520064)
		columns: 	an OrderedCollection(a MorphTreeColumn)
		potentialDropMorph: 	nil
		rowInset: 	0
		columnInset: 	0
		columnResizers: 	an OrderedCollection()
		withHLines: 	false
		preferedPaneColor: 	nil
		indentGap: 	20
		expandedToggleImage: 	an ImageMorph(743994880)
		notExpandedToggleImage: 	an ImageMorph(602172416)
		resizerWidth: 	3
		gapAfterToggle: 	5
		hasToggleAtRoot: 	nil
		topHeader: 	a Morph(206251008)
		topHeaderBackground: 	Color transparent
		unboundLastColumn: 	true
		columnDropUnabled: 	nil
		columnColors: 	{Color transparent. Color transparent}
		rowColors: 	{Color white. Color white}
		nodeList: 	an OrderedCollection(Node(a MethodGroup ( Last Modified Methods )) No...etc...
		iconBlock: 	nil
		treeLineWidth: 	0
		lineColorBlock: 	nil
		treeLineDashes: 	nil
		listManager: 	a MorphTreeListManager
		mouseOverAllowed: 	true
		maxNodeWidth: 	273.0
		enabled: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a PanelMorph(913355264)
		globalPt: 	(381@294)
		localEvt: 	[(381@294) mouseDown yellow 8584894 nil]
		index: 	1
		child: 	a MorphTreeMorph(779534336)
		morphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		handler: 	nil
		inside: 	nil
		lastHandler: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(381@294) mouseDown yellow 8584894 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8584894
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(381@294)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a PanelMorph(913355264)
	Receiver's instance variables: 
		morph: 	nil


PanelMorph(Morph)>>processEvent:using:
	Receiver: a PanelMorph(913355264)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(323.0@213.0) corner: (506.0@460.0)
		owner: 	a NautilusWindow(457766912)
		submorphs: 	an Array(a MorphTreeMorph(779534336) a SearchMorph(352832512))
		fullBounds: 	(323@213) corner: (506@460)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (96053248) [sticky]  [other:  (kmDispatcher -> a KM...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a NautilusWindow(457766912)
		globalPt: 	(381@294)
		localEvt: 	[(381@294) mouseDown yellow 8584894 nil]
		index: 	11
		child: 	a PanelMorph(913355264)
		morphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014510...etc...
		handler: 	a NautilusWindow(457766912)
		inside: 	nil
		lastHandler: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(381@294) mouseDown yellow 8584894 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8584894
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(381@294)
		handler: 	a NautilusWindow(457766912)
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a NautilusWindow(457766912)
	Receiver's instance variables: 
		morph: 	nil


NautilusWindow(Morph)>>processEvent:using:
	Receiver: a NautilusWindow(457766912)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(318.0@154.0) corner: (1168.0@774.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(536742400) a WindowEdgeGripMorph(2014...etc...
		fullBounds: 	(318@154) corner: (1168@774)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (524990976) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a NautilusUI
		labelString: 	'OrderedCollection class'
		stripes: 	an Array(a Morph(590530560) a Morph(451980288))
		label: 	a LabelMorph(26819584)'OrderedCollection class'
		closeBox: 	a MultistateButtonMorph(540333056)
		collapseBox: 	a MultistateButtonMorph(861301248)
		paneMorphs: 	an Array(a QANautilusPluginMorph(512055808) a PanelMorph(687618560)...etc...
		collapsedFrame: 	nil
		fullFrame: 	(318.0@154.0) corner: (1168.0@774.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(74968576)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(743604224)
		expandBox: 	a MultistateButtonMorph(786802176)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a WorldMorph(562956288) [world]
		globalPt: 	(381@294)
		localEvt: 	[(381@294) mouseDown yellow 8584894 nil]
		index: 	2
		child: 	a NautilusWindow(457766912)
		morphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a SpecWi...etc...
		handler: 	a WorldMorph(562956288) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		morph: 	nil


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		morph: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(381@294) mouseDown yellow 8584894 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	8584894
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	2
		position: 	(381@294)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	2


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	nil


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(457766912) a Spe...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (10137088) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(381@294) corner: (397@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(381@294) corner: (397@310)
		color: 	Color blue
		extension: 	a MorphExtension (690153472)
		mouseFocus: 	a MorphTreeMorph(779534336)
		keyboardFocus: 	a MorphTreeMorph(779534336)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(381@294) mouseDown yellow 8584894 nil]
		targetOffset: 	(58.0@54.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8584894 381 294 2 0 0 1)
		lastKeyScanCode: 	31
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
UndefinedObject(Object)>>shouldBeImplemented
UndefinedObject(Object)>>lastClicked:
MorphTreeListManager>>lastClickedMorph:
MorphTreeListManager>>setSelectedMorph:
MorphTreeMorph>>yellowButtonEvent:
MorphTreeMorph>>mouseDown:
MorphTreeMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
MorphTreeMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MorphTreeMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
12 November 2022 2:29:37.537373 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

PastaTest(TestAsserter)>>assert:
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest>>testIguals
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest(TestCase)>>performTest
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	63
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	58
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	61
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	56
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	55
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PastaTest(TestCase)>>runCaseManaged
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:29:37.517696+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:29:37.517696+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest class(TestCase class)>>debug:
	Receiver: PastaTest
	Arguments and temporary variables: 
		aSymbol: 	#testIguals
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setup->PastaTest>>#setup #testIguals->PastaTest...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PastaTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PastaTest>>#testIguals
		aBoolean: 	true
		testMethod: 	PastaTest>>#testIguals
		testClass: 	PastaTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(989463552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		owner: 	a FTCellMorph(317427200)
		submorphs: 	an Array(an ImageMorph(967348736))
		fullBounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		color: 	Color transparent
		extension: 	a MorphExtension (709013504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(967348736)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(989463552)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		owner: 	a FTCellMorph(317427200)
		submorphs: 	an Array(an ImageMorph(967348736))
		fullBounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		color: 	Color transparent
		extension: 	a MorphExtension (709013504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(967348736)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(989463552)
	Arguments and temporary variables: 
		evt: 	[(1077@239) mouseUp 2914003 nil]
	Receiver's instance variables: 
		bounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		owner: 	a FTCellMorph(317427200)
		submorphs: 	an Array(an ImageMorph(967348736))
		fullBounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		color: 	Color transparent
		extension: 	a MorphExtension (709013504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(967348736)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(989463552)
	Arguments and temporary variables: 
		anEvent: 	[(1077@239) mouseUp 2914003 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		owner: 	a FTCellMorph(317427200)
		submorphs: 	an Array(an ImageMorph(967348736))
		fullBounds: 	(1069.0@226.0) corner: (1085.0@242.0)
		color: 	Color transparent
		extension: 	a MorphExtension (709013504) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(967348736)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1077@239) mouseUp 2914003 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(989463552)
	Receiver's instance variables: 
		timeStamp: 	2914003
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1077@239)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PastaTest(TestAsserter)>>assert:
PastaTest>>testIguals
PastaTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
BlockClosure>>ensure:
PastaTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PastaTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
BlockClosure>>ensure:
PastaTest(TestCase)>>debug
PastaTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
12 November 2022 2:32:13.268965 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

PastaTest(TestAsserter)>>assert:
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest>>testIguals
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest(TestCase)>>performTest
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	63
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	58
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	61
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	56
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	55
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PastaTest(TestCase)>>runCaseManaged
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:32:13.257922+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:32:13.257922+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest class(TestCase class)>>debug:
	Receiver: PastaTest
	Arguments and temporary variables: 
		aSymbol: 	#testIguals
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setup->PastaTest>>#setup #testIguals->PastaTest...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PastaTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testIguals) #passed->a...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PastaTest>>#testIguals
		aBoolean: 	true
		testMethod: 	PastaTest>>#testIguals
		testClass: 	PastaTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1040068608)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(560984576)
		submorphs: 	an Array(an ImageMorph(717494784))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (817915904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(717494784)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1040068608)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(560984576)
		submorphs: 	an Array(an ImageMorph(717494784))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (817915904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(717494784)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1040068608)
	Arguments and temporary variables: 
		evt: 	[(1061@245) mouseUp 3069729 nil]
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(560984576)
		submorphs: 	an Array(an ImageMorph(717494784))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (817915904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(717494784)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1040068608)
	Arguments and temporary variables: 
		anEvent: 	[(1061@245) mouseUp 3069729 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(560984576)
		submorphs: 	an Array(an ImageMorph(717494784))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (817915904) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(717494784)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1061@245) mouseUp 3069729 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1040068608)
	Receiver's instance variables: 
		timeStamp: 	3069729
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1061@245)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PastaTest(TestAsserter)>>assert:
PastaTest>>testIguals
PastaTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
BlockClosure>>ensure:
PastaTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PastaTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
BlockClosure>>ensure:
PastaTest(TestCase)>>debug
PastaTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
12 November 2022 2:34:57.324733 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

PastaTest(TestAsserter)>>assert:
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest>>testIguals
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest(TestCase)>>performTest
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	63
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	58
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	61
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	56
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	55
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PastaTest(TestCase)>>runCaseManaged
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:34:57.314545+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:34:57.314545+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest class(TestCase class)>>debug:
	Receiver: PastaTest
	Arguments and temporary variables: 
		aSymbol: 	#testIguals
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setup->PastaTest>>#setup #testIguals->PastaTest...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PastaTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testIguals) #passed->a...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PastaTest>>#testIguals
		aBoolean: 	true
		testMethod: 	PastaTest>>#testIguals
		testClass: 	PastaTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(609680896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(189130240)
		submorphs: 	an Array(an ImageMorph(37100544))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (782349824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(37100544)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(609680896)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(189130240)
		submorphs: 	an Array(an ImageMorph(37100544))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (782349824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(37100544)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(609680896)
	Arguments and temporary variables: 
		evt: 	[(1053@243) mouseUp 3233798 nil]
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(189130240)
		submorphs: 	an Array(an ImageMorph(37100544))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (782349824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(37100544)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(609680896)
	Arguments and temporary variables: 
		anEvent: 	[(1053@243) mouseUp 3233798 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(189130240)
		submorphs: 	an Array(an ImageMorph(37100544))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (782349824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(37100544)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1053@243) mouseUp 3233798 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(609680896)
	Receiver's instance variables: 
		timeStamp: 	3233798
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1053@243)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PastaTest(TestAsserter)>>assert:
PastaTest>>testIguals
PastaTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
BlockClosure>>ensure:
PastaTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PastaTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
BlockClosure>>ensure:
PastaTest(TestCase)>>debug
PastaTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
12 November 2022 2:36:05.391936 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

PastaTest(TestAsserter)>>assert:
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest>>testIguals
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest(TestCase)>>performTest
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	63
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	58
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	61
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	56
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	55
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PastaTest(TestCase)>>runCaseManaged
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:36:05.382449+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:36:05.382449+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest class(TestCase class)>>debug:
	Receiver: PastaTest
	Arguments and temporary variables: 
		aSymbol: 	#testIguals
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setup->PastaTest>>#setup #testIguals->PastaTest...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PastaTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testIguals) #passed->a...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PastaTest>>#testIguals
		aBoolean: 	true
		testMethod: 	PastaTest>>#testIguals
		testClass: 	PastaTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1056821760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(169832448)
		submorphs: 	an Array(an ImageMorph(420145664))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (462477824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420145664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(1056821760)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(169832448)
		submorphs: 	an Array(an ImageMorph(420145664))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (462477824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420145664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(1056821760)
	Arguments and temporary variables: 
		evt: 	[(1059@238) mouseUp 3301874 nil]
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(169832448)
		submorphs: 	an Array(an ImageMorph(420145664))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (462477824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420145664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(1056821760)
	Arguments and temporary variables: 
		anEvent: 	[(1059@238) mouseUp 3301874 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(169832448)
		submorphs: 	an Array(an ImageMorph(420145664))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (462477824) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(420145664)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1059@238) mouseUp 3301874 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(1056821760)
	Receiver's instance variables: 
		timeStamp: 	3301874
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1059@238)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PastaTest(TestAsserter)>>assert:
PastaTest>>testIguals
PastaTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
BlockClosure>>ensure:
PastaTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PastaTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
BlockClosure>>ensure:
PastaTest(TestCase)>>debug
PastaTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
12 November 2022 2:38:32.613224 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

PastaTest(TestAsserter)>>assert:
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest>>testIguals
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest(TestCase)>>performTest
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>runCase
		startpc: 	57
		numArgs: 	0


PastaTest(TestCase)>>runCase
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	63
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	58
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	61
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	56
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	55
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	PastaTest>>#testIguals
		maxTimeForTest: 	0:00:01:00
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentExecutionEnvironment


PastaTest(TestCase)>>runCaseManaged
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	nil
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:38:32.604845+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	74
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	PastaTest>>#testIguals
	Receiver's instance variables: 
		timeStamp: 	2022-11-12T14:38:32.604845+01:00
		failures: 	a Set(PastaTest>>#testIguals)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	PastaTest(TestCase)>>debug
		startpc: 	50
		numArgs: 	0


PastaTest(TestCase)>>debug
	Receiver: PastaTest>>#testIguals
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testIguals
		expectedFails: 	#()
		eur5: 	nil
		eur10: 	nil
		eur20: 	nil


PastaTest class(TestCase class)>>debug:
	Receiver: PastaTest
	Arguments and temporary variables: 
		aSymbol: 	#testIguals
	Receiver's instance variables: 
		superclass: 	TestCase
		methodDict: 	a MethodDictionary(#setup->PastaTest>>#setup #testIguals->PastaTest...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PastaTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testIguals) #passed->a...etc...


NautilusUI class>>runTestForAMethod:notifying:
	Receiver: NautilusUI
	Arguments and temporary variables: 
		aMethod: 	PastaTest>>#testIguals
		aBoolean: 	true
		testMethod: 	PastaTest>>#testIguals
		testClass: 	PastaTest
		testResult: 	nil
		color: 	nil
	Receiver's instance variables: 
		superclass: 	AbstractNautilusUI
		methodDict: 	a MethodDictionary(size 183)
		format: 	65560
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#NautilusUI
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#Nautilus
		traitComposition: 	{}
		localSelectors: 	nil


[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(597295104)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(440049152)
		submorphs: 	an Array(an ImageMorph(214044160))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (405624320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(214044160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IconicButton(SimpleButtonMorph)>>doButtonAction
		startpc: 	68
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


IconicButton(SimpleButtonMorph)>>doButtonAction
	Receiver: an IconicButton(597295104)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(440049152)
		submorphs: 	an Array(an ImageMorph(214044160))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (405624320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(214044160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(SimpleButtonMorph)>>mouseUp:
	Receiver: an IconicButton(597295104)
	Arguments and temporary variables: 
		evt: 	[(1055@250) mouseUp 3449079 nil]
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(440049152)
		submorphs: 	an Array(an ImageMorph(214044160))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (405624320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(214044160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


IconicButton(Morph)>>handleMouseUp:
	Receiver: an IconicButton(597295104)
	Arguments and temporary variables: 
		anEvent: 	[(1055@250) mouseUp 3449079 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		owner: 	a FTCellMorph(440049152)
		submorphs: 	an Array(an ImageMorph(214044160))
		fullBounds: 	(1050.0@235.0) corner: (1066.0@251.0)
		color: 	Color transparent
		extension: 	a MorphExtension (405624320) [balloonText] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	NautilusUI
		actionSelector: 	#runTestForAMethod:notifying:
		arguments: 	{PastaTest>>#testIguals. true}
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	nil
		graphicalMorph: 	an ImageMorph(214044160)
		oldBorder: 	nil
		oldBorderStyle: 	(BorderStyle width: 0 color: Color transparent)
		mouseOverBorderStyle: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(1055@250) mouseUp 3449079 nil]
	Arguments and temporary variables: 
		anObject: 	an IconicButton(597295104)
	Receiver's instance variables: 
		timeStamp: 	3449079
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1055@250)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4



--- The full stack ---
PastaTest(TestAsserter)>>assert:
PastaTest>>testIguals
PastaTest(TestCase)>>performTest
[ self setUp.
self performTest ] in PastaTest(TestCase)>>runCase
BlockClosure>>ensure:
PastaTest(TestCase)>>runCase
[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
BlockClosure>>on:do:
TestExecutionEnvironment>>runTestCaseSafelly:
[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ensure:
[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
BlockClosure>>ifCurtailed:
TestExecutionEnvironment>>runTestCase:
[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
BlockClosure>>ensure:
CurrentExecutionEnvironment class>>activate:for:
TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment>>runTestCase:
CurrentExecutionEnvironment class>>runTestCase:
PastaTest(TestCase)>>runCaseManaged
[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
BlockClosure>>on:do:
TestResult>>runCaseForDebug:
[ result runCaseForDebug: self ] in PastaTest(TestCase)>>debug
BlockClosure>>ensure:
PastaTest(TestCase)>>debug
PastaTest class(TestCase class)>>debug:
NautilusUI class>>runTestForAMethod:notifying:
[ target perform: actionSelector withArguments: arguments ] in IconicButton(SimpleButtonMorph)>>doButtonAction
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
IconicButton(SimpleButtonMorph)>>doButtonAction
IconicButton(SimpleButtonMorph)>>mouseUp:
IconicButton(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
IconicButton(Morph)>>handleEvent:
IconicButton(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ProvaClosures class did not understand #provaClosures
12 November 2022 6:04:24.225854 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
	Receiver: ProvaClosures
	Arguments and temporary variables: 
		aMessage: 	provaClosures
		exception: 	MessageNotUnderstood: ProvaClosures class>>provaClosures
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#provaClosures->ProvaClosures>>#provaClosures )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ProvaClosures
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		r1: 	nil
		r2: 	nil
		i1: 	nil
		i2: 	nil
		v1: 	nil
		v2: 	nil
		tmp1: 	nil
		tmp2: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures provaClo...etc...
		itsSelection: 	a Text for '| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures...etc...
		itsSelectionString: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures prov...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
	tmp1 := ProvaClosures provaClosures...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(821307904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(784837632)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@164)
		owner: 	a TransformWithLayoutMorph(10516992)
		submorphs: 	an Array(a RubPrimarySelectionMorph(594778624) a RubCursor(982231552...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (662657024) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982943744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(982231552)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(426941440))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(216.0@301.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(821307904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4706519
		lastStepMessage: 	nil
		lastCycleTime: 	4706540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4706519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4706519
		lastStepMessage: 	nil
		lastCycleTime: 	4706540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4706519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4706519
		lastStepMessage: 	nil
		lastCycleTime: 	4706540
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4706519
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ProvaClosures class did not understand #provaClosures
12 November 2022 6:04:59.075726 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
	Receiver: ProvaClosures
	Arguments and temporary variables: 
		aMessage: 	provaClosures
		exception: 	MessageNotUnderstood: ProvaClosures class>>provaClosures
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#provaClosures->ProvaClosures>>#provaClosures )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ProvaClosures
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		r1: 	nil
		r2: 	nil
		i1: 	nil
		i2: 	nil
		v1: 	nil
		v2: 	nil
		tmp1: 	nil
		tmp2: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures provaClo...etc...
		itsSelection: 	a Text for '| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures...etc...
		itsSelectionString: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures prov...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
	tmp1 := ProvaClosures provaClosures...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(821307904)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4741380
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4741397
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4741380
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4741397
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4741374
		lastStepMessage: 	nil
		lastCycleTime: 	4741397
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4741374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4741397
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4741374
		lastStepMessage: 	nil
		lastCycleTime: 	4741397
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4741374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4741374
		lastStepMessage: 	nil
		lastCycleTime: 	4741397
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4741374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4741374
		lastStepMessage: 	nil
		lastCycleTime: 	4741397
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4741374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4741374
		lastStepMessage: 	nil
		lastCycleTime: 	4741397
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4741374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Sy...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ProvaClosures class did not understand #provaClosures
12 November 2022 6:05:50.305759 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
	Receiver: ProvaClosures
	Arguments and temporary variables: 
		aMessage: 	provaClosures
		exception: 	MessageNotUnderstood: ProvaClosures class>>provaClosures
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#provaClosures->ProvaClosures>>#provaClosures )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ProvaClosures
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#ProvesCAP2022
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		r1: 	nil
		r2: 	nil
		i1: 	nil
		i2: 	nil
		v1: 	nil
		v2: 	nil
		tmp1: 	nil
		tmp2: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures provaClo...etc...
		itsSelection: 	a Text for '| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures...etc...
		itsSelectionString: 	'| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
tmp1 := ProvaClosures prov...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| r1 r2 i1 i2 v1 v2 tmp1 tmp2 |
	tmp1 := ProvaClosures provaClosures...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(784837632)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(821307904)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(784837632)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@164)
		owner: 	a TransformWithLayoutMorph(10516992)
		submorphs: 	an Array(a RubPrimarySelectionMorph(594778624) a RubCursor(982231552...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (662657024) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(982943744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(982231552)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(194744320))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(821307904)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4792604
		lastStepMessage: 	nil
		lastCycleTime: 	4792624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4792604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4792604
		lastStepMessage: 	nil
		lastCycleTime: 	4792624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4792604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(459578880))(a DropList...etc...
		lastStepTime: 	4792604
		lastStepMessage: 	nil
		lastCycleTime: 	4792624
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(982231552)))
		lastAlarmTime: 	4792604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246578688) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (982019072) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
ProvaClosures class(Object)>>doesNotUnderstand: #provaClosures
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
13 November 2022 11:45:13.338989 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable'
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>at:put:
	Receiver: nil
	Arguments and temporary variables: 
		index: 	1
		value: 	'hola'
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ anArray at: 1 put: 'hola'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1369543
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1369560
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1369543
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1369560
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1369560
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1369539
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1369560
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1369560
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1369539
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1369560
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1369539
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1369560
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1369539
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1369560
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1369539
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>error:
UndefinedObject(Object)>>errorNotIndexable
UndefinedObject(Object)>>at:put:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of SmallInteger are not indexable
13 November 2022 11:45:25.735799 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>error:
	Receiver: 1
	Arguments and temporary variables: 
		aString: 	'Instances of SmallInteger are not indexable'
	Receiver's instance variables: 
1

SmallInteger(Object)>>errorNotIndexable
	Receiver: 1
	Arguments and temporary variables: 

	Receiver's instance variables: 
1

SmallInteger(Object)>>at:put:
	Receiver: 1
	Arguments and temporary variables: 
		index: 	1
		value: 	'hola'
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ 1 at: 1 put: 'hola'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1381947
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1381964
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1381947
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1381964
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1381964
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1381941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1381964
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1381964
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1381941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1381964
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1381941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1381964
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1381941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1381964
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1381941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>error:
SmallInteger(Object)>>errorNotIndexable
SmallInteger(Object)>>at:put:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
13 November 2022 11:49:36.64021 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:put:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		anObject: 	'un'
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ OrderedCollection new
		at: 1 put: 'un';
		at: 2 put: 'dos'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1632853
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1632867
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1632853
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1632867
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1632867
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1632846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1632867
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1632867
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1632846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1632867
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1632846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1632867
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1632846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	1632867
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1632846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>at:put:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
13 November 2022 11:49:48.350908 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:put:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		anObject: 	'un'
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'OrderedCollection new at: 1 put: ''un''; at: 2 put: ''dos'''
		itsSelection: 	a Text for 'OrderedCollection new at: 1 put: ''un''; at: 2 put: '...etc...
		itsSelectionString: 	'OrderedCollection new at: 1 put: ''un''; at: 2 put: ''dos'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	^ OrderedCollection new
		at: 1 put: 'un';
		at: 2 put: 'dos'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1644563
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1644576
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1644563
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1644576
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1644576
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1644555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1644576
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1644576
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1644555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1644576
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1644555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1644576
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1644555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1644576
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1644555
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>at:put:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #put
13 November 2022 11:50:02.617834 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #put
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	put
		exception: 	MessageNotUnderstood: SmallInteger>>put
		resumeValue: 	nil
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'OrderedCollection new at: 1 put'
		itsSelection: 	a Text for 'OrderedCollection new at: 1 put'
		itsSelectionString: 	'OrderedCollection new at: 1 put'
	Receiver's instance variables: 
		ast: 	DoIt
	^ OrderedCollection new at: 1 put
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1658828
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1658844
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1658828
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1658844
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1658844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1658821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1658844
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1658844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1658821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1658844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1658821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1658844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1658821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1642081
		lastStepMessage: 	nil
		lastCycleTime: 	1658844
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1658821
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #put
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
13 November 2022 11:51:24.613965 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


OrderedCollection>>at:put:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		anObject: 	'un'
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	0


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ OrderedCollection new
		at: 1 put: 'un';
		at: 2 put: 'dos';
		you...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(241114624)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(245102592)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1740824
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1740840
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1740824
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1740840
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1661242
		lastStepMessage: 	nil
		lastCycleTime: 	1740840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1740817
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1740840
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1661242
		lastStepMessage: 	nil
		lastCycleTime: 	1740840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1740817
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1661242
		lastStepMessage: 	nil
		lastCycleTime: 	1740840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1740817
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1661242
		lastStepMessage: 	nil
		lastCycleTime: 	1740840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1740817
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1661242
		lastStepMessage: 	nil
		lastCycleTime: 	1740840
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898920960)))
		lastAlarmTime: 	1740817
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(246100992) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (217534976) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>at:put:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#includes: was sent to nil
13 November 2022 4:28:31.77471 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #includes:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	includes: nil
		exception: 	MessageNotUnderstood: receiver of "includes:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ (x includes: y)
		ifTrue: [  ]
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	840038
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	840056
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	840038
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	840056
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	840056
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	840033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	840056
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	840056
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	840033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	840056
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	840033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	840056
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	840033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	109491
		lastStepMessage: 	nil
		lastCycleTime: 	840056
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	840033
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #includes:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#+ was sent to nil
13 November 2022 4:31:11.012616 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 21
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | sum := sum + each ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		unArray: 	#(21 23 53 66 87)
		suma: 	0
		each: 	21
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: #(21 23 53 66 87)
	Arguments and temporary variables: 
		aBlock: 	[ :each | sum := sum + each ]
		index: 	1
	Receiver's instance variables: 
#(21 23 53 66 87)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		unArray: 	#(21 23 53 66 87)
		suma: 	0
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| unArray suma |
suma := 0.
unArray := #(21 23 53 66 87).
unAr...etc...
		itsSelection: 	a Text for '| unArray suma |
suma := 0.
unArray := #(21 23 53 66 ...etc...
		itsSelectionString: 	'| unArray suma |
suma := 0.
unArray := #(21 23 53 66 87).
...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| unArray suma |
	suma := 0.
	unArray := #(21 23 53 66 87).
	unArray...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	999285
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	999299
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	999285
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	999299
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	843640
		lastStepMessage: 	nil
		lastCycleTime: 	999299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	999278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	999299
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	843640
		lastStepMessage: 	nil
		lastCycleTime: 	999299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	999278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	843640
		lastStepMessage: 	nil
		lastCycleTime: 	999299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	999278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	843640
		lastStepMessage: 	nil
		lastCycleTime: 	999299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	999278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	843640
		lastStepMessage: 	nil
		lastCycleTime: 	999299
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	999278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[ :each | sum := sum + each ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #object
13 November 2022 4:56:56.241074 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #object
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aMessage: 	object
		exception: 	MessageNotUnderstood: Array>>object
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ #(1 2 3 4) object
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2544514
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2544529
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2544514
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2544529
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2544529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2544508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2544529
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2544529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2544508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2544529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2544508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2544529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2544508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2544529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2544508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #object
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #Object
13 November 2022 4:57:04.352211 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #Object
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aMessage: 	Object
		exception: 	MessageNotUnderstood: Array>>Object
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ #(1 2 3 4) Object
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2552625
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2552640
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2552625
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2552640
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2552640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2552617
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2552640
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2552640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2552617
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2552640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2552617
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2552640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2552617
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2552640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2552617
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #Object
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #arr
13 November 2022 4:57:37.2281 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #arr
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	arr
		exception: 	MessageNotUnderstood: Array>>arr
		resumeValue: 	nil
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|arr|
arr:= Array new 
arr size'
		itsSelection: 	a Text for '|arr|
arr:= Array new 
arr size'
		itsSelectionString: 	'|arr|
arr:= Array new 
arr size'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	^ arr := Array new arr size
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2585502
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2585517
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2585502
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2585517
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2585517
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2585496
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2585517
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2585517
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2585496
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2585517
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2585496
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2585517
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2585496
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2585517
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2585496
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #arr
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #arr
13 November 2022 4:57:39.786833 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #arr
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	arr
		exception: 	MessageNotUnderstood: Array>>arr
		resumeValue: 	nil
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'|arr|
arr:= Array new 
arr size'
		itsSelection: 	a Text for '|arr|
arr:= Array new 
arr size'
		itsSelectionString: 	'|arr|
arr:= Array new 
arr size'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	^ arr := Array new arr size
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2588058
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2588073
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2588058
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2588073
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2588073
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2588052
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2588073
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2588073
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2588052
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2588073
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2588052
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2588073
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2588052
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2588073
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2588052
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #arr
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #arr
13 November 2022 5:00:47.913654 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #arr
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aMessage: 	arr
		exception: 	MessageNotUnderstood: Array>>arr
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 3 4)
arr size'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 3 4)
arr size'
		itsSelectionString: 	'| arr |
arr := #(1 2 3 4)
arr size'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	^ arr := #(1 2 3 4) arr size
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2776186
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2776201
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2776186
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2776201
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2776201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2776180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2776201
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2776201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2776180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2776201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2776180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2776201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2776180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	1012848
		lastStepMessage: 	nil
		lastCycleTime: 	2776201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2776180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #arr
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
13 November 2022 5:01:05.508988 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable'
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ arr size
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2793783
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2793798
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2793783
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2793798
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2785383
		lastStepMessage: 	nil
		lastCycleTime: 	2793798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2793777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2793798
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2785383
		lastStepMessage: 	nil
		lastCycleTime: 	2793798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2793777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2785383
		lastStepMessage: 	nil
		lastCycleTime: 	2793798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2793777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2785383
		lastStepMessage: 	nil
		lastCycleTime: 	2793798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2793777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2785383
		lastStepMessage: 	nil
		lastCycleTime: 	2793798
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	2793777
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>error:
UndefinedObject(Object)>>errorNotIndexable
UndefinedObject(Object)>>size
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#+ was sent to nil
13 November 2022 5:06:22.415843 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 1
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | sum := sum + each ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		mediana: 	nil
		sum: 	nil
		each: 	1
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aBlock: 	[ :each | sum := sum + each ]
		index: 	1
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		mediana: 	nil
		sum: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	ifTrue: [...etc...
		itsSelection: 	a Text for '| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	...etc...
		itsSelectionString: 	'| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	ifTru...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr sum mediana |
	arr := #(1 2 3 4).
	arr size = 0
		ifTrue: [ 'a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3110681
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3110699
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3110681
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3110699
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3110699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3110676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3110699
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3110699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3110676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3110699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3110676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3110699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3110676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3110699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3110676
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[ :each | sum := sum + each ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#+ was sent to nil
13 November 2022 5:07:52.086564 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #+
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	+ 1
		exception: 	MessageNotUnderstood: receiver of "+" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | sum := sum + each ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		mediana: 	nil
		sum: 	nil
		each: 	1
	Receiver's instance variables: 
nil

Array(SequenceableCollection)>>do:
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aBlock: 	[ :each | sum := sum + each ]
		index: 	1
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		mediana: 	nil
		sum: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	ifTrue: [...etc...
		itsSelection: 	a Text for '| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	...etc...
		itsSelectionString: 	'| arr sum mediana |
arr := #(1 2 3 4).
arr size = 0
	ifTru...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr sum mediana |
	arr := #(1 2 3 4).
	^ arr size = 0
		ifTrue: [ ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3200352
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3200367
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3200352
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3200367
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3200367
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3200346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3200367
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3200367
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3200346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3200367
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3200346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3200367
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3200346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap()
		lastStepTime: 	2798628
		lastStepMessage: 	nil
		lastCycleTime: 	3200367
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3200346
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) an I...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #+
[ :each | sum := sum + each ] in UndefinedObject>>DoIt
Array(SequenceableCollection)>>do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BoxedFloat64 did not understand #ceil
13 November 2022 5:12:07.912113 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BoxedFloat64(Object)>>doesNotUnderstand: #ceil
	Receiver: 3.5
	Arguments and temporary variables: 
		aMessage: 	ceil
		exception: 	MessageNotUnderstood: BoxedFloat64>>ceil
		resumeValue: 	nil
	Receiver's instance variables: 
3.5

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ 3.5 ceil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3456186
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	3456201
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	3456186
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	3456201
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	3456180
		lastStepMessage: 	nil
		lastCycleTime: 	3456201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3456180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	3456201
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	3456180
		lastStepMessage: 	nil
		lastCycleTime: 	3456201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3456180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	3456180
		lastStepMessage: 	nil
		lastCycleTime: 	3456201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3456180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	3456180
		lastStepMessage: 	nil
		lastCycleTime: 	3456201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3456180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	3456180
		lastStepMessage: 	nil
		lastCycleTime: 	3456201
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	3456180
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BoxedFloat64(Object)>>doesNotUnderstand: #ceil
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:28:56.160646 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr arr2 arr2Size i |
	arr := #(1 2 3 4).
	i := 1.
	^ arr size < 2...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4464429
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4464446
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4464429
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4464446
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4464423
		lastStepMessage: 	nil
		lastCycleTime: 	4464446
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4464423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4464446
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4464423
		lastStepMessage: 	nil
		lastCycleTime: 	4464446
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4464423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4464423
		lastStepMessage: 	nil
		lastCycleTime: 	4464446
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4464423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4464423
		lastStepMessage: 	nil
		lastCycleTime: 	4464446
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4464423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4464423
		lastStepMessage: 	nil
		lastCycleTime: 	4464446
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4464423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:29:19.395212 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ] ]
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr arr2 arr2Size i |
	arr := #(1 2 3 4).
	i := 1.
	^ arr size < 2...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4487662
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4487678
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4487662
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4487678
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4487655
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4487655
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4487678
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4487655
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4487655
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4487655
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4487655
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4487655
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4487655
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4487655
		lastStepMessage: 	nil
		lastCycleTime: 	4487678
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4487655
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:30:37.33857 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1...etc...
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr arr2 arr2Size i |
	arr := #(1 2 3 4).
	i := 1.
	^ arr size < 2...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4565614
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4565625
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4565614
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4565625
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4565604
		lastStepMessage: 	nil
		lastCycleTime: 	4565625
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4565604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4565625
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4565604
		lastStepMessage: 	nil
		lastCycleTime: 	4565625
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4565604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4565604
		lastStepMessage: 	nil
		lastCycleTime: 	4565625
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4565604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Sp...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4565604
		lastStepMessage: 	nil
		lastCycleTime: 	4565625
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4565604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4565604
		lastStepMessage: 	nil
		lastCycleTime: 	4565625
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4565604
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Sp...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:31:51.623528 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1...etc...
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4639891
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4639907
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4639891
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4639907
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4639887
		lastStepMessage: 	nil
		lastCycleTime: 	4639907
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4639887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4639907
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4639887
		lastStepMessage: 	nil
		lastCycleTime: 	4639907
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4639887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4639887
		lastStepMessage: 	nil
		lastCycleTime: 	4639907
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4639887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4639887
		lastStepMessage: 	nil
		lastCycleTime: 	4639907
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4639887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	4639887
		lastStepMessage: 	nil
		lastCycleTime: 	4639907
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4639887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:32:11.73066 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	67
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	67
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	67
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1...etc...
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	<<error during printing>>

RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4659999
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4660016
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4659999
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4660016
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4659993
		lastStepMessage: 	nil
		lastCycleTime: 	4660016
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4659993
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4660016
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4659993
		lastStepMessage: 	nil
		lastCycleTime: 	4660016
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4659993
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4659993
		lastStepMessage: 	nil
		lastCycleTime: 	4660016
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4659993
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4659993
		lastStepMessage: 	nil
		lastCycleTime: 	4660016
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4659993
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4659993
		lastStepMessage: 	nil
		lastCycleTime: 	4660016
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4659993
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:34:39.990437 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1...etc...
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr arr2 arr2Size i |
	arr := #(1 2 3 4).
	i := 1.
	^ arr size < 2...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4808259
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4808275
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4808259
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4808275
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4808254
		lastStepMessage: 	nil
		lastCycleTime: 	4808275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4808254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4808275
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4808254
		lastStepMessage: 	nil
		lastCycleTime: 	4808275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4808254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4808254
		lastStepMessage: 	nil
		lastCycleTime: 	4808275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4808254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4808254
		lastStepMessage: 	nil
		lastCycleTime: 	4808275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4808254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4808254
		lastStepMessage: 	nil
		lastCycleTime: 	4808275
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4808254
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#adaptToNumber:andSend: was sent to nil
13 November 2022 5:35:33.43166 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2 andSend: #*
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2
		selector: 	#*
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>*
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2

SmallInteger>>*
	Receiver: 2
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'(arr at: 2*i-1)'
		itsSelection: 	a Text for '(arr at: 2*i-1)'
		itsSelectionString: 	'(arr at: 2*i-1)'
	Receiver's instance variables: 
		ast: 	DoIt
	^ arr at: 2 * i - 1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4861701
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4861717
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4861701
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4861717
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4861696
		lastStepMessage: 	nil
		lastCycleTime: 	4861717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4861696
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4861717
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4861696
		lastStepMessage: 	nil
		lastCycleTime: 	4861717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4861696
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4861696
		lastStepMessage: 	nil
		lastCycleTime: 	4861717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4861696
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4861696
		lastStepMessage: 	nil
		lastCycleTime: 	4861717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4861696
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(328318976))(a DropList...etc...
		lastStepTime: 	4861696
		lastStepMessage: 	nil
		lastCycleTime: 	4861717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	4861696
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>*
SmallInteger>>*
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
13 November 2022 5:40:34.058458 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

BlockClosure(Object)>>error:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1 ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	UndefinedObject>>DoIt
		startpc: 	65
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ arr2 at: i put: [ (arr at: 2 * i - 1) + (arr at: 2 * i) ].
i := i + 1...etc...
		nextValue: 	1
	Receiver's instance variables: 
1

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		arr2: 	nil
		arr2Size: 	2
		i: 	1
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size < 2...etc...
		itsSelection: 	a Text for '| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr...etc...
		itsSelectionString: 	'| arr arr2 arr2Size i|
arr := #(1 2 3 4).
i := 1.
arr size...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr arr2 arr2Size i |
	arr := #(1 2 3 4).
	i := 1.
	^ arr size < 2...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(128084992)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(96789504)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	5162324
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	5162339
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	5162324
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	5162339
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	5162316
		lastStepMessage: 	nil
		lastCycleTime: 	5162339
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	5162316
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	5162339
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	5162316
		lastStepMessage: 	nil
		lastCycleTime: 	5162339
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	5162316
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	5162316
		lastStepMessage: 	nil
		lastCycleTime: 	5162339
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	5162316
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	5162316
		lastStepMessage: 	nil
		lastCycleTime: 	5162339
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	5162316
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1055)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1055x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(1052511744))(a SearchMor...etc...
		lastStepTime: 	5162316
		lastStepMessage: 	nil
		lastCycleTime: 	5162339
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(623068672)))
		lastAlarmTime: 	5162316
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1055)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(621700608) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1055)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (625565184) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#arraySize was sent to nil
14 November 2022 5:07:44.740969 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

UndefinedObject(Object)>>doesNotUnderstand: #arraySize
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	arraySize
		exception: 	MessageNotUnderstood: receiver of "arraySize" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ arr arraySize
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1119331
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1119345
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1119331
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1119345
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1119324
		lastStepMessage: 	nil
		lastCycleTime: 	1119345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1119324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1119345
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1119324
		lastStepMessage: 	nil
		lastCycleTime: 	1119345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1119324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1119324
		lastStepMessage: 	nil
		lastCycleTime: 	1119345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1119324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1119324
		lastStepMessage: 	nil
		lastCycleTime: 	1119345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1119324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1119324
		lastStepMessage: 	nil
		lastCycleTime: 	1119345
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1119324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #arraySize
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #mitjana
14 November 2022 5:10:17.488264 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #mitjana
	Receiver: #()
	Arguments and temporary variables: 
		aMessage: 	mitjana
		exception: 	MessageNotUnderstood: Array>>mitjana
		resumeValue: 	nil
	Receiver's instance variables: 
#()

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#()
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #().
arr mitjana'
		itsSelection: 	a Text for '| arr |
arr := #().
arr mitjana'
		itsSelectionString: 	'| arr |
arr := #().
arr mitjana'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #().
	^ arr mitjana
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1272081
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1272098
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1272081
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1272098
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	1272075
		lastStepMessage: 	nil
		lastCycleTime: 	1272098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1272075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1272098
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	1272075
		lastStepMessage: 	nil
		lastCycleTime: 	1272098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1272075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	1272075
		lastStepMessage: 	nil
		lastCycleTime: 	1272098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1272075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	1272075
		lastStepMessage: 	nil
		lastCycleTime: 	1272098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1272075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	1272075
		lastStepMessage: 	nil
		lastCycleTime: 	1272098
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1272075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #mitjana
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Improper store into indexable object
14 November 2022 5:11:00.874661 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

IntegerArray(Object)>>error:
	Receiver: an IntegerArray(0 0 0 0)
	Arguments and temporary variables: 
		aString: 	'Improper store into indexable object'
	Receiver's instance variables: 
an IntegerArray(0 0 0 0)

IntegerArray(Object)>>errorImproperStore
	Receiver: an IntegerArray(0 0 0 0)
	Arguments and temporary variables: 

	Receiver's instance variables: 
an IntegerArray(0 0 0 0)

IntegerArray(Object)>>basicAt:put:
	Receiver: an IntegerArray(0 0 0 0)
	Arguments and temporary variables: 
		index: 	1
		value: 	1.5
	Receiver's instance variables: 
an IntegerArray(0 0 0 0)

IntegerArray>>at:put:
	Receiver: an IntegerArray(0 0 0 0)
	Arguments and temporary variables: 
		index: 	1
		anInteger: 	1.5
		word: 	1.5
	Receiver's instance variables: 
an IntegerArray(0 0 0 0)

Array(SequenceableCollection)>>asIntegerArray
	Receiver: #(1.5 2 9 7)
	Arguments and temporary variables: 
		intArray: 	an IntegerArray(0 0 0 0)
		i: 	1
	Receiver's instance variables: 
#(1.5 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	nil
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1.5 2 9 7) asIntegerArray.
arr mitjana'
		itsSelection: 	a Text for '| arr |
arr := #(1.5 2 9 7) asIntegerArray.
arr mitja...etc...
		itsSelectionString: 	'| arr |
arr := #(1.5 2 9 7) asIntegerArray.
arr mitjana'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1.5 2 9 7) asIntegerArray.
	^ arr mitjana
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1315466
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1315484
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1315466
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1315484
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1315461
		lastStepMessage: 	nil
		lastCycleTime: 	1315484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1315461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1315484
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1315461
		lastStepMessage: 	nil
		lastCycleTime: 	1315484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1315461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1315461
		lastStepMessage: 	nil
		lastCycleTime: 	1315484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1315461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1315461
		lastStepMessage: 	nil
		lastCycleTime: 	1315484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1315461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	1315461
		lastStepMessage: 	nil
		lastCycleTime: 	1315484
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	1315461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
IntegerArray(Object)>>error:
IntegerArray(Object)>>errorImproperStore
IntegerArray(Object)>>basicAt:put:
IntegerArray>>at:put:
Array(SequenceableCollection)>>asIntegerArray
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #do:
14 November 2022 6:04:37.420036 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #do:
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	do: [ :x | x + 1 ]
		exception: 	MessageNotUnderstood: SmallInteger>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
1

[ :i | self at: i put: ((self at: i) do: aBloc) ] in IntegerArray(SequenceableCollection)>>aplica:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 1 ]
		i: 	1
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :i | self at: i put: ((self at: i) do: aBloc) ]
		aValue: 	1
		index: 	1
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


IntegerArray(SequenceableCollection)>>aplica:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 1 ]
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	an IntegerArray(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica: [ :x | x...etc...
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica:...etc...
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica: [ :x...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7) asIntegerArray.
	^ arr aplica: [ :x | x +...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4532010
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4532026
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4532010
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4532026
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	4532006
		lastStepMessage: 	nil
		lastCycleTime: 	4532026
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4532006
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4532026
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	4532006
		lastStepMessage: 	nil
		lastCycleTime: 	4532026
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4532006
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	4532006
		lastStepMessage: 	nil
		lastCycleTime: 	4532026
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4532006
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	4532006
		lastStepMessage: 	nil
		lastCycleTime: 	4532026
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4532006
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	4532006
		lastStepMessage: 	nil
		lastCycleTime: 	4532026
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4532006
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #do:
[ :i | self at: i put: ((self at: i) do: aBloc) ] in IntegerArray(SequenceableCollection)>>aplica:
Interval>>do:
IntegerArray(SequenceableCollection)>>aplica:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #do:
14 November 2022 6:06:15.791473 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

SmallInteger(Object)>>doesNotUnderstand: #do:
	Receiver: 1
	Arguments and temporary variables: 
		aMessage: 	do: [ :x | x + 1 ]
		exception: 	MessageNotUnderstood: SmallInteger>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
1

[ :i | self at: i put: ((self at: i) do: aBloc) ] in IntegerArray(SequenceableCollection)>>aplica:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 1 ]
		i: 	1
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :i | self at: i put: ((self at: i) do: aBloc) ]
		aValue: 	1
		index: 	1
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


IntegerArray(SequenceableCollection)>>aplica:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 1 ]
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	an IntegerArray(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica: [ :x | x...etc...
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica:...etc...
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr aplica: [ :x...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7) asIntegerArray.
	^ arr aplica: [ :x | x +...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4630380
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4630398
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4630380
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4630398
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	4630375
		lastStepMessage: 	nil
		lastCycleTime: 	4630398
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4630375
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4630398
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	4630375
		lastStepMessage: 	nil
		lastCycleTime: 	4630398
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4630375
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	4630375
		lastStepMessage: 	nil
		lastCycleTime: 	4630398
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4630375
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	4630375
		lastStepMessage: 	nil
		lastCycleTime: 	4630398
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4630375
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	4630375
		lastStepMessage: 	nil
		lastCycleTime: 	4630398
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	4630375
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #do:
[ :i | self at: i put: ((self at: i) do: aBloc) ] in IntegerArray(SequenceableCollection)>>aplica:
Interval>>do:
IntegerArray(SequenceableCollection)>>aplica:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in IntegerArray
14 November 2022 6:28:33.474849 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

IntegerArray(Object)>>shouldNotImplement
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 

	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

IntegerArray(ArrayedCollection)>>add:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		newObject: 	5
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

IntegerArray(SequenceableCollection)>>afegeix:
	Receiver: an IntegerArray(1 2 9 7)
	Arguments and temporary variables: 
		anElement: 	5
	Receiver's instance variables: 
an IntegerArray(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	an IntegerArray(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr afegeix: 5'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7) asIntegerArray.
arr afegeix...etc...
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7) asIntegerArray.
arr afegeix: 5'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7) asIntegerArray.
	^ arr afegeix: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	5968067
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	5968081
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	5968067
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	5968081
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	5968061
		lastStepMessage: 	nil
		lastCycleTime: 	5968081
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	5968061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	5968081
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	5968061
		lastStepMessage: 	nil
		lastCycleTime: 	5968081
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	5968061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	5968061
		lastStepMessage: 	nil
		lastCycleTime: 	5968081
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	5968061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	5968061
		lastStepMessage: 	nil
		lastCycleTime: 	5968081
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	5968061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	5968061
		lastStepMessage: 	nil
		lastCycleTime: 	5968081
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	5968061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
IntegerArray(Object)>>shouldNotImplement
IntegerArray(ArrayedCollection)>>add:
IntegerArray(SequenceableCollection)>>afegeix:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
ShouldNotImplement: #add: should not have been implemented in Array
14 November 2022 6:30:12.223349 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>shouldNotImplement
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 

	Receiver's instance variables: 
#(1 2 9 7)

Array(ArrayedCollection)>>add:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		newObject: 	5
	Receiver's instance variables: 
#(1 2 9 7)

Array>>afegeix:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		anElement: 	5
	Receiver's instance variables: 
#(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7).
	^ arr afegeix: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6066819
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	6066833
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6066819
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	6066833
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	6066813
		lastStepMessage: 	nil
		lastCycleTime: 	6066833
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6066813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	6066833
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	6066813
		lastStepMessage: 	nil
		lastCycleTime: 	6066833
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6066813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	6066813
		lastStepMessage: 	nil
		lastCycleTime: 	6066833
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6066813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	6066813
		lastStepMessage: 	nil
		lastCycleTime: 	6066833
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6066813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(619215872))(a SearchMorp...etc...
		lastStepTime: 	6066813
		lastStepMessage: 	nil
		lastCycleTime: 	6066833
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6066813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>shouldNotImplement
Array(ArrayedCollection)>>add:
Array>>afegeix:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 5
14 November 2022 6:33:49.260493 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		index: 	5
	Receiver's instance variables: 
#(1 2 9 7)

Array(Object)>>at:put:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		index: 	5
		value: 	5
	Receiver's instance variables: 
#(1 2 9 7)

Array>>afegeix:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		anElement: 	5
	Receiver's instance variables: 
#(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7).
	^ arr afegeix: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6283854
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	6283870
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6283854
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	6283870
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6283849
		lastStepMessage: 	nil
		lastCycleTime: 	6283870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6283849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	6283870
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6283849
		lastStepMessage: 	nil
		lastCycleTime: 	6283870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6283849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6283849
		lastStepMessage: 	nil
		lastCycleTime: 	6283870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6283849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6283849
		lastStepMessage: 	nil
		lastCycleTime: 	6283870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6283849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6283849
		lastStepMessage: 	nil
		lastCycleTime: 	6283870
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6283849
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Array>>afegeix:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #push:
14 November 2022 6:34:16.965988 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #push:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		aMessage: 	push: 5
		exception: 	MessageNotUnderstood: Array>>push:
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 9 7)

Array>>afegeix:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		anElement: 	5
	Receiver's instance variables: 
#(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7).
	^ arr afegeix: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6311558
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	6311574
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6311558
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	6311574
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6311552
		lastStepMessage: 	nil
		lastCycleTime: 	6311574
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6311552
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	6311574
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6311552
		lastStepMessage: 	nil
		lastCycleTime: 	6311574
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6311552
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6311552
		lastStepMessage: 	nil
		lastCycleTime: 	6311574
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6311552
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6311552
		lastStepMessage: 	nil
		lastCycleTime: 	6311574
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6311552
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6311552
		lastStepMessage: 	nil
		lastCycleTime: 	6311574
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6311552
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #push:
Array>>afegeix:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #afegeix:
14 November 2022 6:37:07.128105 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Array(Object)>>doesNotUnderstand: #afegeix:
	Receiver: #(1 2 9 7)
	Arguments and temporary variables: 
		aMessage: 	afegeix: 5
		exception: 	MessageNotUnderstood: Array>>afegeix:
		resumeValue: 	nil
	Receiver's instance variables: 
#(1 2 9 7)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 9 7)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
		itsSelectionString: 	'| arr |
arr := #(1 2 9 7).
arr afegeix: 5'
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 9 7).
	^ arr afegeix: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(182801408)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(720406016)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6481720
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	6481737
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	6481720
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	6481737
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6481714
		lastStepMessage: 	nil
		lastCycleTime: 	6481737
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6481714
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	6481737
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6481714
		lastStepMessage: 	nil
		lastCycleTime: 	6481737
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6481714
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6481714
		lastStepMessage: 	nil
		lastCycleTime: 	6481737
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6481714
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6481714
		lastStepMessage: 	nil
		lastCycleTime: 	6481737
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6481714
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(478308864))(a DropList...etc...
		lastStepTime: 	6481714
		lastStepMessage: 	nil
		lastCycleTime: 	6481737
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(969427968)))
		lastAlarmTime: 	6481714
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(122221568) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (283845632) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #afegeix:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: an AnnouncementSubscription not found in IdentitySet
14 November 2022 7:17:30.595475 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

IdentitySet(Collection)>>errorNotFound:
	Receiver: an IdentitySet(an AnnouncementSubscription an AnnouncementSubscription)
	Arguments and temporary variables: 
		anObject: 	an AnnouncementSubscription
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil an AnnouncementSubscription an AnnouncementSubscrip...etc...


[ self errorNotFound: oldObject ] in IdentitySet(Collection)>>remove:
	Receiver: an IdentitySet(an AnnouncementSubscription an AnnouncementSubscription)
	Arguments and temporary variables: 
		oldObject: 	an AnnouncementSubscription
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil an AnnouncementSubscription an AnnouncementSubscrip...etc...


IdentitySet(Set)>>remove:ifAbsent:
	Receiver: an IdentitySet(an AnnouncementSubscription an AnnouncementSubscription)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil an AnnouncementSubscription an AnnouncementSubscrip...etc...


IdentitySet(Collection)>>remove:
	Receiver: an IdentitySet(an AnnouncementSubscription an AnnouncementSubscription)
	Arguments and temporary variables: 
		oldObject: 	an AnnouncementSubscription
	Receiver's instance variables: 
		tally: 	2
		array: 	an Array(nil nil nil an AnnouncementSubscription an AnnouncementSubscrip...etc...


THERE_BE_DRAGONS_HERE
KeyNotFound: key #ex not found in Dictionary
14 November 2022 7:17:30.636531 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		aKey: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		key: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


Dictionary>>at:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		key: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


IRMethod>>indexForVarNamed:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		aName: 	#ex
	Receiver's instance variables: 
		sourceNode: 	debugProcess: process context: context label: title fullView: bool ...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	5
		properties: 	nil
		tempMap: 	a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRTranslatorV2>>visitPushTemp:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		tmp: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRPushTemp>>accept:
	Receiver: pushTemp: #ex
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	RBArgumentNode(ex)
		bytecodeIndex: 	nil
		sequence: 	an IRSequence (7)
		name: 	#ex


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitInstruction:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instr: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


THERE_BE_DRAGONS_HERE
KeyNotFound: key #ex not found in Dictionary
14 November 2022 7:17:30.658501 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Dictionary>>errorKeyNotFound:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		aKey: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


[ self errorKeyNotFound: key ] in Dictionary>>at:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		key: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


Dictionary>>at:
	Receiver: a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString->5 #process->1 #tit...etc...
	Arguments and temporary variables: 
		key: 	#ex
	Receiver's instance variables: 
		tally: 	6
		array: 	{nil. nil. nil. #notificationString->5. nil. #debugSession->6. nil. #con...etc...


IRMethod>>indexForVarNamed:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		aName: 	#ex
	Receiver's instance variables: 
		sourceNode: 	debugProcess: process context: context label: title fullView: bool ...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	5
		properties: 	nil
		tempMap: 	a Dictionary(#bool->4 #context->2 #debugSession->6 #notificationString...etc...
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRTranslatorV2>>visitPushTemp:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		tmp: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRPushTemp>>accept:
	Receiver: pushTemp: #ex
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	RBArgumentNode(ex)
		bytecodeIndex: 	nil
		sequence: 	an IRSequence (7)
		name: 	#ex


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitInstruction:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instr: 	pushTemp: #ex
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(an IRMethod)
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


THERE_BE_DRAGONS_HERE
Instance of Character did not understand #adaptToNumber:andSend:
14 November 2022 7:47:08.423627 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2401 uuid: 29232e0e-c9e3-41d8-ae75-519db862e02c Jun 28 2018
VM: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Thu Jun 28 14:56:30 2018 CommitHash: a8a1dc1 Plugins: 201806281256 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60547]

Character(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: $h
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 1 andSend: #+
		exception: 	MessageNotUnderstood: Character>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
$h

Character(Object)>>adaptToInteger:andSend:
	Receiver: $h
	Arguments and temporary variables: 
		rcvr: 	1
		selector: 	#+
	Receiver's instance variables: 
$h

SmallInteger(Integer)>>+
	Receiver: 1
	Arguments and temporary variables: 
		aNumber: 	$h
	Receiver's instance variables: 
1

SmallInteger>>+
	Receiver: 1
	Arguments and temporary variables: 
		aNumber: 	$h
	Receiver's instance variables: 
1

[ :element | rcvr perform: selector with: element ] in ByteString(Collection)>>adaptToNumber:andSend:
	Receiver: 'hola'
	Arguments and temporary variables: 
		rcvr: 	1
		selector: 	#+
		element: 	$h
	Receiver's instance variables: 
'hola'

ByteString(SequenceableCollection)>>collect:
	Receiver: 'hola'
	Arguments and temporary variables: 
		aBlock: 	[ :element | rcvr perform: selector with: element ]
		newCollection: 	'    '
		index: 	1
	Receiver's instance variables: 
'hola'

ByteString(Collection)>>adaptToNumber:andSend:
	Receiver: 'hola'
	Arguments and temporary variables: 
		rcvr: 	1
		selector: 	#+
	Receiver's instance variables: 
'hola'

ByteString(Object)>>adaptToInteger:andSend:
	Receiver: 'hola'
	Arguments and temporary variables: 
		rcvr: 	1
		selector: 	#+
	Receiver's instance variables: 
'hola'

SmallInteger(Integer)>>+
	Receiver: 1
	Arguments and temporary variables: 
		aNumber: 	'hola'
	Receiver's instance variables: 
1

SmallInteger>>+
	Receiver: 1
	Arguments and temporary variables: 
		aNumber: 	'hola'
	Receiver's instance variables: 
1

[ :x | x + 'hola' ] in UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
		x: 	1
	Receiver's instance variables: 
nil

[ :i | self at: i put: (aBloc value: (self at: i)) ] in Array(SequenceableCollection)>>aplica:
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 'hola' ]
		i: 	1
	Receiver's instance variables: 
#(1 2 3 4)

Interval>>do:
	Receiver: (1 to: 4)
	Arguments and temporary variables: 
		aBlock: 	[ :i | self at: i put: (aBloc value: (self at: i)) ]
		aValue: 	1
		index: 	1
		size: 	4
	Receiver's instance variables: 
		start: 	1
		stop: 	4
		step: 	1


Array(SequenceableCollection)>>aplica:
	Receiver: #(1 2 3 4)
	Arguments and temporary variables: 
		aBloc: 	[ :x | x + 'hola' ]
	Receiver's instance variables: 
#(1 2 3 4)

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 
		arr: 	#(1 2 3 4)
	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'| arr |
arr := #(1 2 3 4).
arr aplica: [ :x | x+''hola'' ]'
		itsSelection: 	a Text for '| arr |
arr := #(1 2 3 4).
arr aplica: [ :x | x+''hol...etc...
		itsSelectionString: 	'| arr |
arr := #(1 2 3 4).
arr aplica: [ :x | x+''hola'' ]...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	| arr |
	arr := #(1 2 3 4).
	^ arr aplica: [ :x | x + 'hola' ]
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(523072512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(523072512)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(301217280)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1705307
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	1705322
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	1705307
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	1705322
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(106060800))(a DropList...etc...
		lastStepTime: 	1705301
		lastStepMessage: 	nil
		lastCycleTime: 	1705322
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
		lastAlarmTime: 	1705301
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	1705322
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(106060800))(a DropList...etc...
		lastStepTime: 	1705301
		lastStepMessage: 	nil
		lastCycleTime: 	1705322
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
		lastAlarmTime: 	1705301
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(106060800))(a DropList...etc...
		lastStepTime: 	1705301
		lastStepMessage: 	nil
		lastCycleTime: 	1705322
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
		lastAlarmTime: 	1705301
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(231493120) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (29074944) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(106060800))(a DropList...etc...
		lastStepTime: 	1705301
		lastStepMessage: 	nil
		lastCycleTime: 	1705322
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
		lastAlarmTime: 	1705301
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1017)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1017x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(106060800))(a DropList...etc...
		lastStepTime: 	1705301
		lastStepMessage: 	nil
		lastCycleTime: 	1705322
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(547790336)))
		lastAlarmTime: 	1705301
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1017)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(231493120) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1017)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (29074944) [other:  (dragEnabled -> true) (dropEnab...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil
		displayScaleFactor: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Character(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
[ :element | rcvr perform: selector with: element ] in ByteString(Collection)>>adaptToNumber:andSend:
ByteString(SequenceableCollection)>>collect:
ByteString(Collection)>>adaptToNumber:andSend:
ByteString(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
[ :x | x + 'hola' ] in UndefinedObject>>DoIt
[ :i | self at: i put: (aBloc value: (self at: i)) ] in Array(SequenceableCollection)>>aplica:
Interval>>do:
Array(SequenceableCollection)>>aplica:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

